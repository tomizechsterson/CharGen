{
	"version": 1,
	"collections": [
		{
			"id": "02505693-c5ce-4fce-91bf-596570449fa3",
			"name": "Adhoc",
			"description": null,
			"auth": null,
			"events": null,
			"variables": null,
			"order": [
				"e60038fe-de8f-47cb-a593-a0f472a8361d",
				"0c125986-2201-4254-a4c6-fb4729e9f947",
				"c3c04834-6715-418e-b9d6-cf4547a2b1ee"
			],
			"folders_order": [],
			"folders": [],
			"requests": [
				{
					"id": "0c125986-2201-4254-a4c6-fb4729e9f947",
					"name": "localget DD35",
					"url": "http://localhost:42001/api/DD35Character",
					"description": "",
					"data": [],
					"dataMode": "raw",
					"headerData": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [],
					"folder": null,
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "02505693-c5ce-4fce-91bf-596570449fa3",
					"rawModeData": "{\r\n  \"name\": \"NewTest{{envName}}\",\r\n  \"playedBy\": \"AnotherNewTest{{envName}}\"\r\n}",
					"headers": "Content-Type: application/json\n",
					"pathVariables": {}
				},
				{
					"id": "c3c04834-6715-418e-b9d6-cf4547a2b1ee",
					"name": "localpost ADD2",
					"url": "http://localhost:42000/api/ADD2Character/new",
					"description": "",
					"data": [],
					"dataMode": "raw",
					"headerData": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"method": "POST",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [],
					"folder": null,
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "02505693-c5ce-4fce-91bf-596570449fa3",
					"rawModeData": "{\r\n  \"name\": \"Test1\",\r\n  \"playedBy\": \"Test1\"\r\n}",
					"headers": "Content-Type: application/json\n",
					"pathVariables": {}
				},
				{
					"id": "e60038fe-de8f-47cb-a593-a0f472a8361d",
					"name": "localget ADD2",
					"url": "http://localhost:42000/api/ADD2Character",
					"description": "",
					"data": [],
					"dataMode": "raw",
					"headerData": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [],
					"folder": null,
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "02505693-c5ce-4fce-91bf-596570449fa3",
					"rawModeData": "{\r\n  \"name\": \"NewTest{{envName}}\",\r\n  \"playedBy\": \"AnotherNewTest{{envName}}\"\r\n}",
					"headers": "Content-Type: application/json\n",
					"pathVariables": {}
				}
			]
		},
		{
			"id": "83085090-696d-4de4-824d-1593147ab755",
			"name": "D&D 3.5",
			"description": "",
			"auth": null,
			"events": null,
			"variables": [],
			"order": [
				"4f912736-694f-4e83-a3f8-f0bbf0df9637",
				"30b2032d-c246-4f34-9fd7-f15da5c4eeba",
				"ec5816a4-96e1-4f90-8399-5990315c20e0"
			],
			"folders_order": [
				"6dd407b0-8080-43fb-a218-53378a22e7d2",
				"4d0b78d7-d98e-4255-8e21-f16f452f0590",
				"d59faaba-281f-46f0-9457-33444add7f82",
				"9d3782cc-eeea-4e87-88ad-7ec2f5641c71"
			],
			"folders": [
				{
					"id": "4d0b78d7-d98e-4255-8e21-f16f452f0590",
					"name": "Starting Age",
					"description": "",
					"auth": null,
					"events": null,
					"collection": "83085090-696d-4de4-824d-1593147ab755",
					"folder": null,
					"order": [
						"ad238dc7-ad1b-4477-8521-bedba1ab71cc",
						"cd5366a4-fab3-4ceb-8288-432bda8303d1",
						"b518c8f0-a25a-4a32-87db-0bb344818cff"
					],
					"folders_order": [],
					"collectionId": "83085090-696d-4de4-824d-1593147ab755",
					"folderId": "4d0b78d7-d98e-4255-8e21-f16f452f0590"
				},
				{
					"id": "d59faaba-281f-46f0-9457-33444add7f82",
					"name": "Starting Height/Weight",
					"description": "",
					"auth": null,
					"events": null,
					"collection": "83085090-696d-4de4-824d-1593147ab755",
					"folder": null,
					"order": [
						"e437d3ea-dcda-4c49-a728-edf3943ba361",
						"8901e4ab-896e-4944-8461-6309d4d260cd",
						"4a792bf8-8e3c-46d9-a7ca-cc5e3b123592"
					],
					"folders_order": [],
					"collectionId": "83085090-696d-4de4-824d-1593147ab755",
					"folderId": "d59faaba-281f-46f0-9457-33444add7f82"
				},
				{
					"id": "6dd407b0-8080-43fb-a218-53378a22e7d2",
					"name": "Stats",
					"description": "",
					"auth": null,
					"events": null,
					"collection": "83085090-696d-4de4-824d-1593147ab755",
					"folder": null,
					"order": [
						"758aabc3-750d-4514-a308-71342f558eb7",
						"5fc29d98-1525-46e8-a6c7-16fbf30a511b",
						"5f6e1422-f3fa-468e-bc93-d5e34d9b9015"
					],
					"folders_order": [],
					"collectionId": "83085090-696d-4de4-824d-1593147ab755",
					"folderId": "6dd407b0-8080-43fb-a218-53378a22e7d2"
				},
				{
					"id": "9d3782cc-eeea-4e87-88ad-7ec2f5641c71",
					"name": "Storage",
					"description": "",
					"auth": null,
					"events": null,
					"collection": "83085090-696d-4de4-824d-1593147ab755",
					"folder": null,
					"order": [
						"f7595e73-983a-48ad-a746-a9fc366b2d35",
						"1950eb14-5232-4e32-9ab1-5792c9463beb",
						"84f17420-e17e-40c8-b848-12f2cc3de343",
						"215310ba-c422-4be7-915a-254eddd53c56",
						"e9e98f98-8836-4ecd-bea1-fa7d83dc5e3c",
						"63f01360-ba34-4be0-9442-8b5eab3c79a5",
						"742b90ca-2d77-4a1d-8513-ac9246b87aa7",
						"78d8f2fd-c41a-4862-b32e-cd2e8cff7b6a",
						"76075951-aef6-48a6-a01f-1c29818c7e12",
						"b1b66d14-c5a3-4d83-883a-8ecf91904514"
					],
					"folders_order": [],
					"collectionId": "83085090-696d-4de4-824d-1593147ab755",
					"folderId": "9d3782cc-eeea-4e87-88ad-7ec2f5641c71"
				}
			],
			"requests": [
				{
					"id": "1950eb14-5232-4e32-9ab1-5792c9463beb",
					"name": "Create Second",
					"url": "{{protocol}}://{{siteName}}/api/DD35Character",
					"description": "",
					"data": [],
					"dataMode": "raw",
					"headerData": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"method": "POST",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "a8390577-78f9-4969-8b63-1f3171de072d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Post must be successful\", function() {",
									"    pm.expect(pm.response.to.be.success);",
									"});"
								]
							}
						}
					],
					"folder": "9d3782cc-eeea-4e87-88ad-7ec2f5641c71",
					"preRequestScript": null,
					"tests": "pm.test(\"Post must be successful\", function() {\n    pm.expect(pm.response.to.be.success);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "83085090-696d-4de4-824d-1593147ab755",
					"rawModeData": "{\r\n  \"name\": \"Second{{envName}}\"\r\n}",
					"headers": "Content-Type: application/json\n",
					"pathVariables": {}
				},
				{
					"id": "215310ba-c422-4be7-915a-254eddd53c56",
					"name": "Get All",
					"url": "{{protocol}}://{{siteName}}/api/DD35Character",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "42f352a7-0913-43f4-a34f-7df6671f07b8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check 2 characters exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    var first = jsonData.find(x => x.id === 1);",
									"    pm.expect(first.name).to.eql(\"NewTest\" + pm.environment.get(\"envName\"));",
									"    var second = jsonData.find(x => x.id === 2 );",
									"    pm.expect(second.name).to.eql(\"Second\" + pm.environment.get(\"envName\"));",
									"});"
								]
							}
						}
					],
					"folder": "9d3782cc-eeea-4e87-88ad-7ec2f5641c71",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\npm.test(\"Check 2 characters exist\", function () {\n    var jsonData = pm.response.json();\n    var first = jsonData.find(x => x.id === 1);\n    pm.expect(first.name).to.eql(\"NewTest\" + pm.environment.get(\"envName\"));\n    var second = jsonData.find(x => x.id === 2 );\n    pm.expect(second.name).to.eql(\"Second\" + pm.environment.get(\"envName\"));\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "83085090-696d-4de4-824d-1593147ab755",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "30b2032d-c246-4f34-9fd7-f15da5c4eeba",
					"name": "Classes",
					"url": "{{protocol}}://{{siteName}}/api/DD35Character/classes",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "0314c726-a84a-408f-aa8b-99f197e73b2a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that 11 classes were returned\", function() {",
									"    pm.expect(jsonData.length).to.eql(11);",
									"});",
									"",
									"pm.test(\"Check the classes that were returned\", function() {",
									"    pm.expect(jsonData.includes(\"Barbarian\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Bard\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Cleric\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Druid\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Fighter\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Monk\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Paladin\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Ranger\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Rogue\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Sorcerer\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Wizard\")).to.be.true;",
									"});"
								]
							}
						}
					],
					"folder": null,
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that 11 classes were returned\", function() {\n    pm.expect(jsonData.length).to.eql(11);\n});\n\npm.test(\"Check the classes that were returned\", function() {\n    pm.expect(jsonData.includes(\"Barbarian\")).to.be.true;\n    pm.expect(jsonData.includes(\"Bard\")).to.be.true;\n    pm.expect(jsonData.includes(\"Cleric\")).to.be.true;\n    pm.expect(jsonData.includes(\"Druid\")).to.be.true;\n    pm.expect(jsonData.includes(\"Fighter\")).to.be.true;\n    pm.expect(jsonData.includes(\"Monk\")).to.be.true;\n    pm.expect(jsonData.includes(\"Paladin\")).to.be.true;\n    pm.expect(jsonData.includes(\"Ranger\")).to.be.true;\n    pm.expect(jsonData.includes(\"Rogue\")).to.be.true;\n    pm.expect(jsonData.includes(\"Sorcerer\")).to.be.true;\n    pm.expect(jsonData.includes(\"Wizard\")).to.be.true;\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "83085090-696d-4de4-824d-1593147ab755",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "4a792bf8-8e3c-46d9-a7ca-cc5e3b123592",
					"name": "Starting Height Weight - Human Female",
					"url": "{{protocol}}://{{siteName}}/api/DD35Character/hw/Human/F",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "bb0cf0c7-4818-4165-a09c-74087dbc8582",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that the height was in the correct range\", function() {",
									"    pm.expect(jsonData[0]).to.be.gte(55).and.lte(73);",
									"});",
									"",
									"pm.test(\"Check that the weight was in the correct range\", function() {",
									"    pm.expect(jsonData[1]).to.be.gte(89).and.lte(245);",
									"});"
								]
							}
						}
					],
					"folder": "d59faaba-281f-46f0-9457-33444add7f82",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that the height was in the correct range\", function() {\n    pm.expect(jsonData[0]).to.be.gte(55).and.lte(73);\n});\n\npm.test(\"Check that the weight was in the correct range\", function() {\n    pm.expect(jsonData[1]).to.be.gte(89).and.lte(245);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "83085090-696d-4de4-824d-1593147ab755",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "4f912736-694f-4e83-a3f8-f0bbf0df9637",
					"name": "Races",
					"url": "{{protocol}}://{{siteName}}/api/DD35Character/races",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "8a562f25-3cab-4987-9943-6e68a6786bfe",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that 7 races were returned\", function() {",
									"    pm.expect(jsonData.length).to.eql(7);",
									"});",
									"",
									"pm.test(\"Check the races that were returned\", function() {",
									"    pm.expect(jsonData.includes(\"Dwarf\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Elf\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Gnome\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Halfling\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Half-Elf\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Half-Orc\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Human\")).to.be.true;",
									"});"
								]
							}
						}
					],
					"folder": null,
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that 7 races were returned\", function() {\n    pm.expect(jsonData.length).to.eql(7);\n});\n\npm.test(\"Check the races that were returned\", function() {\n    pm.expect(jsonData.includes(\"Dwarf\")).to.be.true;\n    pm.expect(jsonData.includes(\"Elf\")).to.be.true;\n    pm.expect(jsonData.includes(\"Gnome\")).to.be.true;\n    pm.expect(jsonData.includes(\"Halfling\")).to.be.true;\n    pm.expect(jsonData.includes(\"Half-Elf\")).to.be.true;\n    pm.expect(jsonData.includes(\"Half-Orc\")).to.be.true;\n    pm.expect(jsonData.includes(\"Human\")).to.be.true;\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "83085090-696d-4de4-824d-1593147ab755",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "5f6e1422-f3fa-468e-bc93-d5e34d9b9015",
					"name": "Stat Adjustments - Human",
					"url": "{{protocol}}://{{siteName}}/api/DD35Character/statadj/Human",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "93343938-6e34-4310-9abb-38c33d0546ac",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check that no adjustments were returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(Object.keys(jsonData).length).to.eql(0);",
									"});"
								]
							}
						}
					],
					"folder": "6dd407b0-8080-43fb-a218-53378a22e7d2",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\npm.test(\"Check that no adjustments were returned\", function() {\n    var jsonData = pm.response.json();\n    pm.expect(Object.keys(jsonData).length).to.eql(0);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "83085090-696d-4de4-824d-1593147ab755",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "5fc29d98-1525-46e8-a6c7-16fbf30a511b",
					"name": "Stat Adjustments - Gnome",
					"url": "{{protocol}}://{{siteName}}/api/DD35Character/statadj/Gnome",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "188c7669-52b0-4bf2-95c6-62c6c4b13816",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check that the right adjustments were returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.con).to.eql(2);",
									"    pm.expect(jsonData.str).to.eql(-2);",
									"});"
								]
							}
						}
					],
					"folder": "6dd407b0-8080-43fb-a218-53378a22e7d2",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\npm.test(\"Check that the right adjustments were returned\", function() {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.con).to.eql(2);\n    pm.expect(jsonData.str).to.eql(-2);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "83085090-696d-4de4-824d-1593147ab755",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "63f01360-ba34-4be0-9442-8b5eab3c79a5",
					"name": "Update Id 1",
					"url": "{{protocol}}://{{siteName}}/api/DD35Character/1",
					"description": "",
					"data": [],
					"dataMode": "raw",
					"headerData": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"method": "PUT",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "e4156efe-29c0-461a-b68b-10be31e2affa",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Put must be successful\", function() {",
									"    pm.expect(pm.response.to.be.success);",
									"});"
								]
							}
						}
					],
					"folder": "9d3782cc-eeea-4e87-88ad-7ec2f5641c71",
					"preRequestScript": null,
					"tests": "pm.test(\"Put must be successful\", function() {\n    pm.expect(pm.response.to.be.success);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "83085090-696d-4de4-824d-1593147ab755",
					"rawModeData": "{\r\n  \"name\":\"updated{{envName}}\"\r\n}",
					"headers": "Content-Type: application/json\n",
					"pathVariables": {}
				},
				{
					"id": "742b90ca-2d77-4a1d-8513-ac9246b87aa7",
					"name": "Get Updated",
					"url": "{{protocol}}://{{siteName}}/api/DD35Character/1",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "1ad4f7a5-9770-46f2-996a-21aeca60dc86",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check Id and name of updated character\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(1);",
									"    pm.expect(jsonData.name).to.eql(\"updated\" + pm.environment.get(\"envName\"));",
									"});"
								]
							}
						}
					],
					"folder": "9d3782cc-eeea-4e87-88ad-7ec2f5641c71",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\npm.test(\"Check Id and name of updated character\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.id).to.eql(1);\n    pm.expect(jsonData.name).to.eql(\"updated\" + pm.environment.get(\"envName\"));\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "83085090-696d-4de4-824d-1593147ab755",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "758aabc3-750d-4514-a308-71342f558eb7",
					"name": "Stat Rolls",
					"url": "{{protocol}}://{{siteName}}/api/DD35Character/stats",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "0486dd32-b30a-4fc0-b073-e4bbf035457b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that 6 rolls were made\", function () {",
									"    pm.expect(jsonData.length).to.eql(6);",
									"});",
									"",
									"pm.test(\"Check that each roll had 3 dice in it\", function() {",
									"    for(var i = 0; i < jsonData.length; i++)",
									"        pm.expect(jsonData[i].length).to.eql(4);",
									"});",
									"",
									"pm.test(\"Check that each roll was within expected bounds\", function() {",
									"    for(var i = 0; i < jsonData.length; i++)",
									"        pm.expect(jsonData[i].reduce(function(acc, val) {return acc + val;})).to.be.gte(4).and.lte(24);",
									"});"
								]
							}
						}
					],
					"folder": "6dd407b0-8080-43fb-a218-53378a22e7d2",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that 6 rolls were made\", function () {\n    pm.expect(jsonData.length).to.eql(6);\n});\n\npm.test(\"Check that each roll had 3 dice in it\", function() {\n    for(var i = 0; i < jsonData.length; i++)\n        pm.expect(jsonData[i].length).to.eql(4);\n});\n\npm.test(\"Check that each roll was within expected bounds\", function() {\n    for(var i = 0; i < jsonData.length; i++)\n        pm.expect(jsonData[i].reduce(function(acc, val) {return acc + val;})).to.be.gte(4).and.lte(24);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "83085090-696d-4de4-824d-1593147ab755",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "76075951-aef6-48a6-a01f-1c29818c7e12",
					"name": "Delete Id 2",
					"url": "{{protocol}}://{{siteName}}/api/DD35Character/2",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "DELETE",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "edf7bc3c-9dcf-489b-a506-c1158b05d130",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Delete must be successful\", function() {",
									"    pm.expect(pm.response.to.be.success);",
									"});"
								]
							}
						}
					],
					"folder": "9d3782cc-eeea-4e87-88ad-7ec2f5641c71",
					"preRequestScript": null,
					"tests": "pm.test(\"Delete must be successful\", function() {\n    pm.expect(pm.response.to.be.success);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "83085090-696d-4de4-824d-1593147ab755",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "78d8f2fd-c41a-4862-b32e-cd2e8cff7b6a",
					"name": "Delete Id 1",
					"url": "{{protocol}}://{{siteName}}/api/DD35Character/1",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "DELETE",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "edf7bc3c-9dcf-489b-a506-c1158b05d130",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Delete must be successful\", function() {",
									"    pm.expect(pm.response.to.be.success);",
									"});"
								]
							}
						}
					],
					"folder": "9d3782cc-eeea-4e87-88ad-7ec2f5641c71",
					"preRequestScript": null,
					"tests": "pm.test(\"Delete must be successful\", function() {\n    pm.expect(pm.response.to.be.success);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "83085090-696d-4de4-824d-1593147ab755",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "84f17420-e17e-40c8-b848-12f2cc3de343",
					"name": "Create Duplicate",
					"url": "{{protocol}}://{{siteName}}/api/DD35Character",
					"description": "",
					"data": [],
					"dataMode": "raw",
					"headerData": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"method": "POST",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "8afd843f-9ab1-40a6-96ea-b18607b52a89",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Post must return 400\", function() {",
									"    pm.expect(pm.response.to.be.clientError);",
									"});"
								]
							}
						}
					],
					"folder": "9d3782cc-eeea-4e87-88ad-7ec2f5641c71",
					"preRequestScript": null,
					"tests": "pm.test(\"Post must return 400\", function() {\n    pm.expect(pm.response.to.be.clientError);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "83085090-696d-4de4-824d-1593147ab755",
					"rawModeData": "{\r\n  \"name\": \"NewTest{{envName}}\",\r\n  \"playedBy\": \"AnotherNewTest{{envName}}\"\r\n}",
					"headers": "Content-Type: application/json\n",
					"pathVariables": {}
				},
				{
					"id": "8901e4ab-896e-4944-8461-6309d4d260cd",
					"name": "Starting Height Weight - Half-Elf Male",
					"url": "{{protocol}}://{{siteName}}/api/DD35Character/hw/Half-Elf/M",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "a4de20a6-3cc1-41d3-8152-cdc26b62c417",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that the height was in the correct range\", function() {",
									"    pm.expect(jsonData[0]).to.be.gte(57).and.lte(71);",
									"});",
									"",
									"pm.test(\"Check that the weight was in the correct range\", function() {",
									"    pm.expect(jsonData[1]).to.be.gte(104).and.lte(228);",
									"});"
								]
							}
						}
					],
					"folder": "d59faaba-281f-46f0-9457-33444add7f82",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that the height was in the correct range\", function() {\n    pm.expect(jsonData[0]).to.be.gte(57).and.lte(71);\n});\n\npm.test(\"Check that the weight was in the correct range\", function() {\n    pm.expect(jsonData[1]).to.be.gte(104).and.lte(228);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "83085090-696d-4de4-824d-1593147ab755",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "ad238dc7-ad1b-4477-8521-bedba1ab71cc",
					"name": "Starting Age - Dwarf Fighter",
					"url": "{{protocol}}://{{siteName}}/api/DD35Character/age/Dwarf/Fighter",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "73eaf788-71ba-4338-90e8-c9fe5af0f2e5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check that the age was in the expected bounds\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.gte(45).and.lte(70);",
									"});"
								]
							}
						}
					],
					"folder": "4d0b78d7-d98e-4255-8e21-f16f452f0590",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\npm.test(\"Check that the age was in the expected bounds\", function() {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.gte(45).and.lte(70);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "83085090-696d-4de4-824d-1593147ab755",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "b1b66d14-c5a3-4d83-883a-8ecf91904514",
					"name": "Get Deleted",
					"url": "{{protocol}}://{{siteName}}/api/DD35Character/1",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "5d7573d0-eee3-4b3d-bfdd-c670027d8af1",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check that character id 1 was deleted\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(0);",
									"    pm.expect(jsonData.name).to.eql(\"none\");",
									"});"
								]
							}
						}
					],
					"folder": "9d3782cc-eeea-4e87-88ad-7ec2f5641c71",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\npm.test(\"Check that character id 1 was deleted\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.id).to.eql(0);\n    pm.expect(jsonData.name).to.eql(\"none\");\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "83085090-696d-4de4-824d-1593147ab755",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "b518c8f0-a25a-4a32-87db-0bb344818cff",
					"name": "Starting Age - Half-Orc Monk",
					"url": "{{protocol}}://{{siteName}}/api/DD35Character/age/Half-Orc/Monk",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "e1a2ac29-ef8a-4d36-847f-afab652d2f9c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check that the age was in the expected bounds\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.gte(16).and.lte(26);",
									"});"
								]
							}
						}
					],
					"folder": "4d0b78d7-d98e-4255-8e21-f16f452f0590",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\npm.test(\"Check that the age was in the expected bounds\", function() {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.gte(16).and.lte(26);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "83085090-696d-4de4-824d-1593147ab755",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "cd5366a4-fab3-4ceb-8288-432bda8303d1",
					"name": "Starting Age - Gnome Barbarian",
					"url": "{{protocol}}://{{siteName}}/api/DD35Character/age/Gnome/Barbarian",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "77599e61-173d-4d98-a391-41674da19f1f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check that the age was in the expected bounds\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.gte(44).and.lte(64);",
									"});"
								]
							}
						}
					],
					"folder": "4d0b78d7-d98e-4255-8e21-f16f452f0590",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\npm.test(\"Check that the age was in the expected bounds\", function() {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.gte(44).and.lte(64);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "83085090-696d-4de4-824d-1593147ab755",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "e437d3ea-dcda-4c49-a728-edf3943ba361",
					"name": "Starting Height Weight - Gnome Female",
					"url": "{{protocol}}://{{siteName}}/api/DD35Character/hw/Gnome/F",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "0a0f33ae-168c-4e4f-a132-e0114ee8561b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that the height was in the correct range\", function() {",
									"    pm.expect(jsonData[0]).to.be.gte(36).and.lte(42);",
									"});",
									"",
									"pm.test(\"Check that the weight was in the correct range\", function() {",
									"    pm.expect(jsonData[1]).to.be.gte(37).and.lte(43);",
									"});"
								]
							}
						}
					],
					"folder": "d59faaba-281f-46f0-9457-33444add7f82",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that the height was in the correct range\", function() {\n    pm.expect(jsonData[0]).to.be.gte(36).and.lte(42);\n});\n\npm.test(\"Check that the weight was in the correct range\", function() {\n    pm.expect(jsonData[1]).to.be.gte(37).and.lte(43);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "83085090-696d-4de4-824d-1593147ab755",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "e9e98f98-8836-4ecd-bea1-fa7d83dc5e3c",
					"name": "Get Id 1",
					"url": "{{protocol}}://{{siteName}}/api/DD35Character/1",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "c9d5d50b-b5a5-4859-9a13-8d9963243836",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check Id and name of character id 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(1);",
									"    pm.expect(jsonData.name).to.eql(\"NewTest\" + pm.environment.get(\"envName\"));",
									"});"
								]
							}
						}
					],
					"folder": "9d3782cc-eeea-4e87-88ad-7ec2f5641c71",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\npm.test(\"Check Id and name of character id 1\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.id).to.eql(1);\n    pm.expect(jsonData.name).to.eql(\"NewTest\" + pm.environment.get(\"envName\"));\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "83085090-696d-4de4-824d-1593147ab755",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "ec5816a4-96e1-4f90-8399-5990315c20e0",
					"name": "Alignments",
					"url": "{{protocol}}://{{siteName}}/api/DD35Character/algn",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "b95779ad-6423-49cf-a73a-8bb81e28d69a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that 9 alignments were returned\", function() {",
									"    pm.expect(jsonData.length).to.eql(9);",
									"});",
									"",
									"pm.test(\"Check the alignments that were returned\", function() {",
									"    pm.expect(jsonData.includes(\"Lawful Good\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Lawful Neutral\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Lawful Evil\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Neutral Good\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Neutral\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Neutral Evil\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Chaotic Good\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Chaotic Neutral\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Chaotic Evil\")).to.be.true;",
									"});"
								]
							}
						}
					],
					"folder": null,
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that 9 alignments were returned\", function() {\n    pm.expect(jsonData.length).to.eql(9);\n});\n\npm.test(\"Check the alignments that were returned\", function() {\n    pm.expect(jsonData.includes(\"Lawful Good\")).to.be.true;\n    pm.expect(jsonData.includes(\"Lawful Neutral\")).to.be.true;\n    pm.expect(jsonData.includes(\"Lawful Evil\")).to.be.true;\n    pm.expect(jsonData.includes(\"Neutral Good\")).to.be.true;\n    pm.expect(jsonData.includes(\"Neutral\")).to.be.true;\n    pm.expect(jsonData.includes(\"Neutral Evil\")).to.be.true;\n    pm.expect(jsonData.includes(\"Chaotic Good\")).to.be.true;\n    pm.expect(jsonData.includes(\"Chaotic Neutral\")).to.be.true;\n    pm.expect(jsonData.includes(\"Chaotic Evil\")).to.be.true;\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "83085090-696d-4de4-824d-1593147ab755",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "f7595e73-983a-48ad-a746-a9fc366b2d35",
					"name": "Create First",
					"url": "{{protocol}}://{{siteName}}/api/DD35Character",
					"description": "",
					"data": [],
					"dataMode": "raw",
					"headerData": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"method": "POST",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "a8390577-78f9-4969-8b63-1f3171de072d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Post must be successful\", function() {",
									"    pm.expect(pm.response.to.be.success);",
									"});"
								]
							}
						}
					],
					"folder": "9d3782cc-eeea-4e87-88ad-7ec2f5641c71",
					"preRequestScript": null,
					"tests": "pm.test(\"Post must be successful\", function() {\n    pm.expect(pm.response.to.be.success);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "83085090-696d-4de4-824d-1593147ab755",
					"rawModeData": "{\r\n  \"name\": \"NewTest{{envName}}\"\r\n}",
					"headers": "Content-Type: application/json\n",
					"pathVariables": {}
				}
			]
		},
		{
			"id": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
			"name": "AD&D  2nd Ed",
			"description": "",
			"auth": null,
			"events": null,
			"variables": [],
			"order": [],
			"folders_order": [
				"d10ba21e-7520-4135-bb13-255f63fbb5d7",
				"bf2c6a1c-9dc2-438c-bc1f-00ce72f54df5",
				"6df5c7cf-7f8d-46b0-ad97-bc6d3e81fc1a",
				"3a83651b-6921-43c7-9252-a4d087dad0c5",
				"c8cdf1d8-3f13-4ed7-9f5f-f7f23f23988a"
			],
			"folders": [
				{
					"id": "c8cdf1d8-3f13-4ed7-9f5f-f7f23f23988a",
					"name": "Alignment Selection",
					"description": "",
					"auth": null,
					"events": null,
					"collection": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"folder": null,
					"order": [
						"f90a2a42-60eb-40c7-931f-4d237663be52",
						"de66fb01-94bd-4d3d-ab28-24a15ecfe96f",
						"9899cb9b-8905-4ec4-b352-5b798a4a44bb"
					],
					"folders_order": [],
					"collectionId": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"folderId": "c8cdf1d8-3f13-4ed7-9f5f-f7f23f23988a"
				},
				{
					"id": "3a83651b-6921-43c7-9252-a4d087dad0c5",
					"name": "Class Selection",
					"description": "",
					"auth": null,
					"events": null,
					"collection": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"folder": null,
					"order": [
						"80f7303b-09e4-43b0-9b5a-e6702e241854",
						"331f967e-7a23-4d6e-8cad-bb04c3fb6207"
					],
					"folders_order": [],
					"collectionId": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"folderId": "3a83651b-6921-43c7-9252-a4d087dad0c5"
				},
				{
					"id": "d10ba21e-7520-4135-bb13-255f63fbb5d7",
					"name": "CrudOps",
					"description": "",
					"auth": null,
					"events": null,
					"collection": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"folder": null,
					"order": [
						"009003cb-5ca5-4cd8-941b-6dac9be68024",
						"4eee21c2-bc34-4a4e-b137-2cf88f908b47",
						"e5550d94-dd37-47dd-9092-695ec3724a33",
						"3f52671b-1b39-4534-aef8-b5a70fe7aa37",
						"5e43a059-b766-4aa7-b5ee-cbf5c2bf8bd9",
						"a2e7b3a5-7a5e-458c-86d4-efdec36358f1",
						"993be94f-4bff-446f-9f0c-ddc1d7ed40c7",
						"35054bd5-f09b-442a-8c12-603c4f374bba",
						"c50cd48d-2870-4370-aff8-d360f60941bc",
						"f49602a3-28f3-44b5-98ad-d6bf4264b698"
					],
					"folders_order": [],
					"collectionId": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"folderId": "d10ba21e-7520-4135-bb13-255f63fbb5d7"
				},
				{
					"id": "6df5c7cf-7f8d-46b0-ad97-bc6d3e81fc1a",
					"name": "Race Selection",
					"description": "",
					"auth": null,
					"events": null,
					"collection": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"folder": null,
					"order": [
						"dcf38e3f-490d-4f22-8061-0376d1597ecb",
						"45aa7690-9f18-46a2-b5f2-7a27e174872f",
						"833b67ac-de8d-42a1-8576-a8815b162a4e",
						"d2a234c3-436d-4c48-afc8-208675068dc8",
						"e45a897c-04a3-4d69-86f3-9cd784857787",
						"96dcb788-f4e1-4cf8-8151-93e0c1dcfca9",
						"9173dfe7-c11b-484c-9016-d73719061f5c"
					],
					"folders_order": [],
					"collectionId": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"folderId": "6df5c7cf-7f8d-46b0-ad97-bc6d3e81fc1a"
				},
				{
					"id": "bf2c6a1c-9dc2-438c-bc1f-00ce72f54df5",
					"name": "Stat Rolling",
					"description": "",
					"auth": null,
					"events": null,
					"collection": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"folder": null,
					"order": [
						"66736833-89cb-4a82-8324-309c8e1c1d9c",
						"b65c6697-3884-480a-af7d-931d6c05cdd7",
						"435435a6-c98b-41d3-9a2f-23ee24e882a9"
					],
					"folders_order": [],
					"collectionId": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"folderId": "bf2c6a1c-9dc2-438c-bc1f-00ce72f54df5"
				}
			],
			"requests": [
				{
					"id": "009003cb-5ca5-4cd8-941b-6dac9be68024",
					"name": "GetAll",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "85e4df17-daba-4411-a0ca-739a479dce64",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check 3 seed characters exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    var first = jsonData.find(x => x.id === 1);",
									"    pm.expect(first.name).to.eql(\"Test1\");",
									"    var second = jsonData.find(x => x.id === 2 );",
									"    pm.expect(second.name).to.eql(\"Someone\");",
									"    var third = jsonData.find(x => x.id === 3);",
									"    pm.expect(third.name).to.eql(\"Person\");",
									"});"
								]
							}
						}
					],
					"folder": "d10ba21e-7520-4135-bb13-255f63fbb5d7",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\npm.test(\"Check 3 seed characters exist\", function () {\n    var jsonData = pm.response.json();\n    var first = jsonData.find(x => x.id === 1);\n    pm.expect(first.name).to.eql(\"Test1\");\n    var second = jsonData.find(x => x.id === 2 );\n    pm.expect(second.name).to.eql(\"Someone\");\n    var third = jsonData.find(x => x.id === 3);\n    pm.expect(third.name).to.eql(\"Person\");\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "331f967e-7a23-4d6e-8cad-bb04c3fb6207",
					"name": "Classes Available for Gnome",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/classes/Gnome/8/18/10/13/18/9",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "48d4b257-5597-43a7-9b74-0515c0d95f6e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that 3 classes were returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(3);",
									"});",
									"",
									"pm.test(\"Check that the expected classes were returned\", function() {",
									"    pm.expect(jsonData.includes(\"Cleric\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Thief\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Cleric/Thief\")).to.be.true;",
									"});"
								]
							}
						}
					],
					"folder": "3a83651b-6921-43c7-9252-a4d087dad0c5",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that 3 classes were returned\", function () {\n    pm.expect(jsonData.length).to.eql(3);\n});\n\npm.test(\"Check that the expected classes were returned\", function() {\n    pm.expect(jsonData.includes(\"Cleric\")).to.be.true;\n    pm.expect(jsonData.includes(\"Thief\")).to.be.true;\n    pm.expect(jsonData.includes(\"Cleric/Thief\")).to.be.true;\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "35054bd5-f09b-442a-8c12-603c4f374bba",
					"name": "Final Update Added Character",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/4/final",
					"description": "",
					"data": [],
					"dataMode": "raw",
					"headerData": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"method": "PUT",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "4bd886ea-b68f-4636-8b5d-204f6135cff8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Put must be successful\", function() {",
									"    pm.expect(pm.response.to.be.success);",
									"});"
								]
							}
						}
					],
					"folder": "d10ba21e-7520-4135-bb13-255f63fbb5d7",
					"preRequestScript": null,
					"tests": "pm.test(\"Put must be successful\", function() {\n    pm.expect(pm.response.to.be.success);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"rawModeData": "{\r\n  \"name\":\"new toon{{envName}}\",\r\n  \"str\":10,\r\n  \"dex\":18,\r\n  \"con\":13,\r\n  \"int\":9,\r\n  \"wis\":7,\r\n  \"chr\":11,\r\n  \"race\":\"Human\",\r\n  \"availableRaces\":[],\r\n  \"gender\":\"M\",\r\n  \"height\":\"65\",\r\n  \"weight\":\"150\",\r\n  \"age\":\"20\",\r\n  \"classname\":\"Thief\",\r\n  \"alignment\":\"Chaotic Good\"\r\n}",
					"headers": "Content-Type: application/json\n",
					"pathVariables": {}
				},
				{
					"id": "3f52671b-1b39-4534-aef8-b5a70fe7aa37",
					"name": "Attempt to Add Duplicate Character",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character",
					"description": "",
					"data": [],
					"dataMode": "raw",
					"headerData": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"method": "POST",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "a73dcfb2-5334-4ab2-81bc-1b7ea3bcd6ba",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Post should return 400\", function() {",
									"    pm.expect(pm.response.to.be.clientError);",
									"});"
								]
							}
						}
					],
					"folder": "d10ba21e-7520-4135-bb13-255f63fbb5d7",
					"preRequestScript": null,
					"tests": "pm.test(\"Post should return 400\", function() {\n    pm.expect(pm.response.to.be.clientError);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"rawModeData": "{\r\n  \"name\": \"NewTest{{envName}}\"\r\n}",
					"headers": "Content-Type: application/json\n",
					"pathVariables": {}
				},
				{
					"id": "435435a6-c98b-41d3-9a2f-23ee24e882a9",
					"name": "Invalid Roll Rule",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/rollstats/invalid",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "026dfdbd-8d67-47f0-8f46-f9bae063fecc",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be 400 - bad request\", function() {",
									"    pm.response.to.be.clientError;",
									"});"
								]
							}
						}
					],
					"folder": "bf2c6a1c-9dc2-438c-bc1f-00ce72f54df5",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be 400 - bad request\", function() {\n    pm.response.to.be.clientError;\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "45aa7690-9f18-46a2-b5f2-7a27e174872f",
					"name": "Races Available with High Stats",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/races/17/17/17/17/17/17",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "9fe87da8-88cf-48e1-b531-241cd9e5cc4a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that 6 races were returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(6);",
									"});",
									"",
									"pm.test(\"Check that the expected races were returned\", function() {",
									"    pm.expect(jsonData.includes(\"Dwarf\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Elf\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Gnome\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Half-Elf\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Halfling\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Human\")).to.be.true;",
									"});"
								]
							}
						}
					],
					"folder": "6df5c7cf-7f8d-46b0-ad97-bc6d3e81fc1a",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that 6 races were returned\", function () {\n    pm.expect(jsonData.length).to.eql(6);\n});\n\npm.test(\"Check that the expected races were returned\", function() {\n    pm.expect(jsonData.includes(\"Dwarf\")).to.be.true;\n    pm.expect(jsonData.includes(\"Elf\")).to.be.true;\n    pm.expect(jsonData.includes(\"Gnome\")).to.be.true;\n    pm.expect(jsonData.includes(\"Half-Elf\")).to.be.true;\n    pm.expect(jsonData.includes(\"Halfling\")).to.be.true;\n    pm.expect(jsonData.includes(\"Human\")).to.be.true;\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "4eee21c2-bc34-4a4e-b137-2cf88f908b47",
					"name": "GetId1",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/1",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "3ab51db7-6683-4f5a-b098-90a274178655",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check Id, name and playedBy of character id 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(1);",
									"    pm.expect(jsonData.name).to.eql(\"Test1\");",
									"});"
								]
							}
						}
					],
					"folder": "d10ba21e-7520-4135-bb13-255f63fbb5d7",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\npm.test(\"Check Id, name and playedBy of character id 1\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.id).to.eql(1);\n    pm.expect(jsonData.name).to.eql(\"Test1\");\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "5e43a059-b766-4aa7-b5ee-cbf5c2bf8bd9",
					"name": "Get New Character",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/4",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "16107f5f-a69b-418a-b79c-dd7140cde7e8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check Id, name, playedBy and stats of character id 4\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(4);",
									"    pm.expect(jsonData.name).to.eql(\"NewTest\" + pm.environment.get(\"envName\"));",
									"    pm.expect(jsonData.str).to.eql(0);",
									"    pm.expect(jsonData.dex).to.eql(0);",
									"    pm.expect(jsonData.con).to.eql(0);",
									"    pm.expect(jsonData.int).to.eql(0);",
									"    pm.expect(jsonData.wis).to.eql(0);",
									"    pm.expect(jsonData.chr).to.eql(0);",
									"});"
								]
							}
						}
					],
					"folder": "d10ba21e-7520-4135-bb13-255f63fbb5d7",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\npm.test(\"Check Id, name, playedBy and stats of character id 4\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.id).to.eql(4);\n    pm.expect(jsonData.name).to.eql(\"NewTest\" + pm.environment.get(\"envName\"));\n    pm.expect(jsonData.str).to.eql(0);\n    pm.expect(jsonData.dex).to.eql(0);\n    pm.expect(jsonData.con).to.eql(0);\n    pm.expect(jsonData.int).to.eql(0);\n    pm.expect(jsonData.wis).to.eql(0);\n    pm.expect(jsonData.chr).to.eql(0);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "66736833-89cb-4a82-8324-309c8e1c1d9c",
					"name": "RollOnce",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/rollstats/rollonce",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "85b624ab-48ca-4e46-96e7-da99baaa18eb",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that 6 rolls were made\", function () {",
									"    pm.expect(jsonData.length).to.eql(6);",
									"});",
									"",
									"pm.test(\"Check that each roll had 3 dice in it\", function() {",
									"    for(var i = 0; i < jsonData.length; i++)",
									"        pm.expect(jsonData[i].length).to.eql(3);",
									"});",
									"",
									"pm.test(\"Check that each roll was within expected bounds\", function() {",
									"    for(var i = 0; i < jsonData.length; i++)",
									"        pm.expect(jsonData[i].reduce(function(acc, val) {return acc + val;})).to.be.gte(3).and.lte(18);",
									"});"
								]
							}
						}
					],
					"folder": "bf2c6a1c-9dc2-438c-bc1f-00ce72f54df5",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that 6 rolls were made\", function () {\n    pm.expect(jsonData.length).to.eql(6);\n});\n\npm.test(\"Check that each roll had 3 dice in it\", function() {\n    for(var i = 0; i < jsonData.length; i++)\n        pm.expect(jsonData[i].length).to.eql(3);\n});\n\npm.test(\"Check that each roll was within expected bounds\", function() {\n    for(var i = 0; i < jsonData.length; i++)\n        pm.expect(jsonData[i].reduce(function(acc, val) {return acc + val;})).to.be.gte(3).and.lte(18);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "80f7303b-09e4-43b0-9b5a-e6702e241854",
					"name": "Classes Available for Average Human",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/classes/Human/9/9/9/9/9/9",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "e87cfce8-8ae4-4ba8-b1f9-454362c2b924",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that 4 classes were returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(4);",
									"});",
									"",
									"pm.test(\"Check that the expected classes were returned\", function() {",
									"    pm.expect(jsonData.includes(\"Fighter\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Mage\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Cleric\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Thief\")).to.be.true;",
									"});"
								]
							}
						}
					],
					"folder": "3a83651b-6921-43c7-9252-a4d087dad0c5",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that 4 classes were returned\", function () {\n    pm.expect(jsonData.length).to.eql(4);\n});\n\npm.test(\"Check that the expected classes were returned\", function() {\n    pm.expect(jsonData.includes(\"Fighter\")).to.be.true;\n    pm.expect(jsonData.includes(\"Mage\")).to.be.true;\n    pm.expect(jsonData.includes(\"Cleric\")).to.be.true;\n    pm.expect(jsonData.includes(\"Thief\")).to.be.true;\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "833b67ac-de8d-42a1-8576-a8815b162a4e",
					"name": "Races Available for the Most Unlucky Stat Roller Ever",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/races/3/3/3/3/3/3",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "289d0a83-fd86-455e-a103-06f78b5118b4",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that 1 race was returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"Check that human was returned\", function() {",
									"    pm.expect(jsonData.includes(\"Human\")).to.be.true;",
									"});"
								]
							}
						}
					],
					"folder": "6df5c7cf-7f8d-46b0-ad97-bc6d3e81fc1a",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that 1 race was returned\", function () {\n    pm.expect(jsonData.length).to.eql(1);\n});\n\npm.test(\"Check that human was returned\", function() {\n    pm.expect(jsonData.includes(\"Human\")).to.be.true;\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "9173dfe7-c11b-484c-9016-d73719061f5c",
					"name": "Starting Height/Weight/Age for Half-Elf Female",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/hwa/half-elf/f",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "3d434e8d-7932-4918-81be-c851ed068377",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that the height was in the correct range\", function() {",
									"    pm.expect(jsonData[0]).to.be.above(59).and.below(71);",
									"});",
									"",
									"pm.test(\"Check that the weight was in the correct range\", function() {",
									"    pm.expect(jsonData[1]).to.be.above(87).and.below(122);",
									"});",
									"",
									"pm.test(\"Check that the age was in the correct range\", function() {",
									"    pm.expect(jsonData[2]).to.be.above(15).and.below(22);",
									"});"
								]
							}
						}
					],
					"folder": "6df5c7cf-7f8d-46b0-ad97-bc6d3e81fc1a",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that the height was in the correct range\", function() {\n    pm.expect(jsonData[0]).to.be.above(59).and.below(71);\n});\n\npm.test(\"Check that the weight was in the correct range\", function() {\n    pm.expect(jsonData[1]).to.be.above(87).and.below(122);\n});\n\npm.test(\"Check that the age was in the correct range\", function() {\n    pm.expect(jsonData[2]).to.be.above(15).and.below(22);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "96dcb788-f4e1-4cf8-8151-93e0c1dcfca9",
					"name": "Starting Height/Weight/Age for Dwarf Male",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/hwa/dwarf/m",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "1b5efdf6-dc16-457e-9a36-97ef655765fe",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that the height was in the correct range\", function() {",
									"    pm.expect(jsonData[0]).to.be.above(43).and.below(54);",
									"});",
									"",
									"pm.test(\"Check that the weight was in the correct range\", function() {",
									"    pm.expect(jsonData[1]).to.be.above(133).and.below(171);",
									"});",
									"",
									"pm.test(\"Check that the age was in the correct range\", function() {",
									"    pm.expect(jsonData[2]).to.be.above(44).and.below(71);",
									"});"
								]
							}
						}
					],
					"folder": "6df5c7cf-7f8d-46b0-ad97-bc6d3e81fc1a",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that the height was in the correct range\", function() {\n    pm.expect(jsonData[0]).to.be.above(43).and.below(54);\n});\n\npm.test(\"Check that the weight was in the correct range\", function() {\n    pm.expect(jsonData[1]).to.be.above(133).and.below(171);\n});\n\npm.test(\"Check that the age was in the correct range\", function() {\n    pm.expect(jsonData[2]).to.be.above(44).and.below(71);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "9899cb9b-8905-4ec4-b352-5b798a4a44bb",
					"name": "Get Alignments for Cleric",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/alignment/Cleric",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "b31fa013-9bbf-4c4d-baee-55e867987f33",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that all 9 alignments were returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(9);",
									"});",
									"",
									"pm.test(\"Check that all the alignments were returned\", function() {",
									"    pm.expect(jsonData.includes(\"Lawful Good\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Lawful Neutral\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Lawful Evil\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Neutral Good\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"True Neutral\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Neutral Evil\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Chaotic Good\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Chaotic Neutral\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Chaotic Evil\")).to.be.true;",
									"});"
								]
							}
						}
					],
					"folder": "c8cdf1d8-3f13-4ed7-9f5f-f7f23f23988a",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that all 9 alignments were returned\", function () {\n    pm.expect(jsonData.length).to.eql(9);\n});\n\npm.test(\"Check that all the alignments were returned\", function() {\n    pm.expect(jsonData.includes(\"Lawful Good\")).to.be.true;\n    pm.expect(jsonData.includes(\"Lawful Neutral\")).to.be.true;\n    pm.expect(jsonData.includes(\"Lawful Evil\")).to.be.true;\n    pm.expect(jsonData.includes(\"Neutral Good\")).to.be.true;\n    pm.expect(jsonData.includes(\"True Neutral\")).to.be.true;\n    pm.expect(jsonData.includes(\"Neutral Evil\")).to.be.true;\n    pm.expect(jsonData.includes(\"Chaotic Good\")).to.be.true;\n    pm.expect(jsonData.includes(\"Chaotic Neutral\")).to.be.true;\n    pm.expect(jsonData.includes(\"Chaotic Evil\")).to.be.true;\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "993be94f-4bff-446f-9f0c-ddc1d7ed40c7",
					"name": "Get Updated Character",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/4",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "e9b5eb1c-49ef-4b3f-af4f-959235f8af6c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check that all properties of character were updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(4);",
									"    pm.expect(jsonData.name).to.eql(\"new toon\" + pm.environment.get(\"envName\"));",
									"    pm.expect(jsonData.str).to.eql(10);",
									"    pm.expect(jsonData.dex).to.eql(18);",
									"    pm.expect(jsonData.con).to.eql(13);",
									"    pm.expect(jsonData.int).to.eql(9);",
									"    pm.expect(jsonData.wis).to.eql(7);",
									"    pm.expect(jsonData.chr).to.eql(11);",
									"    pm.expect(jsonData.race).to.eql(\"Human\");",
									"    pm.expect(jsonData.gender).to.eql(\"M\");",
									"    pm.expect(jsonData.height).to.eql(65);",
									"    pm.expect(jsonData.weight).to.eql(150);",
									"    pm.expect(jsonData.age).to.eql(20);",
									"    pm.expect(jsonData.className).to.eql(\"Thief\");",
									"    pm.expect(jsonData.alignment).to.eql(\"Chaotic Good\");",
									"});"
								]
							}
						}
					],
					"folder": "d10ba21e-7520-4135-bb13-255f63fbb5d7",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\npm.test(\"Check that all properties of character were updated\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.id).to.eql(4);\n    pm.expect(jsonData.name).to.eql(\"new toon\" + pm.environment.get(\"envName\"));\n    pm.expect(jsonData.str).to.eql(10);\n    pm.expect(jsonData.dex).to.eql(18);\n    pm.expect(jsonData.con).to.eql(13);\n    pm.expect(jsonData.int).to.eql(9);\n    pm.expect(jsonData.wis).to.eql(7);\n    pm.expect(jsonData.chr).to.eql(11);\n    pm.expect(jsonData.race).to.eql(\"Human\");\n    pm.expect(jsonData.gender).to.eql(\"M\");\n    pm.expect(jsonData.height).to.eql(65);\n    pm.expect(jsonData.weight).to.eql(150);\n    pm.expect(jsonData.age).to.eql(20);\n    pm.expect(jsonData.className).to.eql(\"Thief\");\n    pm.expect(jsonData.alignment).to.eql(\"Chaotic Good\");\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "a2e7b3a5-7a5e-458c-86d4-efdec36358f1",
					"name": "Update Added Character",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/4",
					"description": "",
					"data": [],
					"dataMode": "raw",
					"headerData": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"method": "PUT",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "4bd886ea-b68f-4636-8b5d-204f6135cff8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Put must be successful\", function() {",
									"    pm.expect(pm.response.to.be.success);",
									"});"
								]
							}
						}
					],
					"folder": "d10ba21e-7520-4135-bb13-255f63fbb5d7",
					"preRequestScript": null,
					"tests": "pm.test(\"Put must be successful\", function() {\n    pm.expect(pm.response.to.be.success);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"rawModeData": "{\r\n  \"name\":\"new toon{{envName}}\",\r\n  \"str\":10,\r\n  \"dex\":18,\r\n  \"con\":13,\r\n  \"int\":9,\r\n  \"wis\":7,\r\n  \"chr\":11,\r\n  \"race\":\"Human\",\r\n  \"availableRaces\":[],\r\n  \"gender\":\"M\",\r\n  \"height\":\"65\",\r\n  \"weight\":\"150\",\r\n  \"age\":\"20\",\r\n  \"classname\":\"Thief\",\r\n  \"alignment\":\"Chaotic Good\"\r\n}",
					"headers": "Content-Type: application/json\n",
					"pathVariables": {}
				},
				{
					"id": "b65c6697-3884-480a-af7d-931d6c05cdd7",
					"name": "Add 7 Dice",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/rollstats/AddSevenDice",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "b5f247b8-e76e-4d68-81e8-074083d65838",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that 7 rolls were made\", function () {",
									"    pm.expect(jsonData.length).to.eql(7);",
									"});",
									"",
									"pm.test(\"Check that each roll had 1 die in it\", function() {",
									"    for(var i = 0; i < jsonData.length; i++)",
									"        pm.expect(jsonData[i].length).to.eql(1);",
									"});",
									"",
									"pm.test(\"Check that each roll was within expected bounds\", function() {",
									"    for(var i = 0; i < jsonData.length; i++)",
									"        pm.expect(jsonData[i].reduce(function(acc, val) {return acc + val;})).to.be.gte(1).and.lte(6);",
									"});"
								]
							}
						}
					],
					"folder": "bf2c6a1c-9dc2-438c-bc1f-00ce72f54df5",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that 7 rolls were made\", function () {\n    pm.expect(jsonData.length).to.eql(7);\n});\n\npm.test(\"Check that each roll had 1 die in it\", function() {\n    for(var i = 0; i < jsonData.length; i++)\n        pm.expect(jsonData[i].length).to.eql(1);\n});\n\npm.test(\"Check that each roll was within expected bounds\", function() {\n    for(var i = 0; i < jsonData.length; i++)\n        pm.expect(jsonData[i].reduce(function(acc, val) {return acc + val;})).to.be.gte(1).and.lte(6);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "c50cd48d-2870-4370-aff8-d360f60941bc",
					"name": "Get Final Updated Character",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/4",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "ef02cf6c-f4ce-4bb5-b399-32264af2b0f1",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check that all properties of character were updated and in the expected ranges\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(4);",
									"    pm.expect(jsonData.name).to.eql(\"new toon\" + pm.environment.get(\"envName\"));",
									"    pm.expect(jsonData.str).to.eql(10);",
									"    pm.expect(jsonData.dex).to.eql(18);",
									"    pm.expect(jsonData.con).to.eql(13);",
									"    pm.expect(jsonData.int).to.eql(9);",
									"    pm.expect(jsonData.wis).to.eql(7);",
									"    pm.expect(jsonData.chr).to.eql(11);",
									"    pm.expect(jsonData.race).to.eql(\"Human\");",
									"    pm.expect(jsonData.gender).to.eql(\"M\");",
									"    pm.expect(jsonData.height).to.eql(65);",
									"    pm.expect(jsonData.weight).to.eql(150);",
									"    pm.expect(jsonData.age).to.eql(20);",
									"    pm.expect(jsonData.className).to.eql(\"Thief\");",
									"    pm.expect(jsonData.alignment).to.eql(\"Chaotic Good\");",
									"    pm.expect(jsonData.hp).to.be.gte(1).and.lte(6);",
									"    pm.expect(jsonData.paralyze).to.eql(13);",
									"    pm.expect(jsonData.rod).to.eql(14);",
									"    pm.expect(jsonData.petrification).to.eql(12);",
									"    pm.expect(jsonData.breath).to.eql(16);",
									"    pm.expect(jsonData.spell).to.eql(15);",
									"    pm.expect(jsonData.moveRate).to.eql(12);",
									"    pm.expect(jsonData.funds).to.be.gte(20).and.lte(120);",
									"});"
								]
							}
						}
					],
					"folder": "d10ba21e-7520-4135-bb13-255f63fbb5d7",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\npm.test(\"Check that all properties of character were updated and in the expected ranges\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.id).to.eql(4);\n    pm.expect(jsonData.name).to.eql(\"new toon\" + pm.environment.get(\"envName\"));\n    pm.expect(jsonData.str).to.eql(10);\n    pm.expect(jsonData.dex).to.eql(18);\n    pm.expect(jsonData.con).to.eql(13);\n    pm.expect(jsonData.int).to.eql(9);\n    pm.expect(jsonData.wis).to.eql(7);\n    pm.expect(jsonData.chr).to.eql(11);\n    pm.expect(jsonData.race).to.eql(\"Human\");\n    pm.expect(jsonData.gender).to.eql(\"M\");\n    pm.expect(jsonData.height).to.eql(65);\n    pm.expect(jsonData.weight).to.eql(150);\n    pm.expect(jsonData.age).to.eql(20);\n    pm.expect(jsonData.className).to.eql(\"Thief\");\n    pm.expect(jsonData.alignment).to.eql(\"Chaotic Good\");\n    pm.expect(jsonData.hp).to.be.gte(1).and.lte(6);\n    pm.expect(jsonData.paralyze).to.eql(13);\n    pm.expect(jsonData.rod).to.eql(14);\n    pm.expect(jsonData.petrification).to.eql(12);\n    pm.expect(jsonData.breath).to.eql(16);\n    pm.expect(jsonData.spell).to.eql(15);\n    pm.expect(jsonData.moveRate).to.eql(12);\n    pm.expect(jsonData.funds).to.be.gte(20).and.lte(120);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "d2a234c3-436d-4c48-afc8-208675068dc8",
					"name": "Stat Adjustments for Gnome",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/statadjust/gnome",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "4572370a-0be6-4664-a9fa-fa64c4635782",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check that the right adjustments were returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.int).to.eql(1);",
									"    pm.expect(jsonData.wis).to.eql(-1);",
									"});"
								]
							}
						}
					],
					"folder": "6df5c7cf-7f8d-46b0-ad97-bc6d3e81fc1a",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\npm.test(\"Check that the right adjustments were returned\", function() {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.int).to.eql(1);\n    pm.expect(jsonData.wis).to.eql(-1);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "dcf38e3f-490d-4f22-8061-0376d1597ecb",
					"name": "Races Available with Low Stats",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/races/8/7/11/5/3/8",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "6844fe5c-066b-4b71-9df8-e7b02d273d5b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that 3 races were returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(3);",
									"});",
									"",
									"pm.test(\"Check that the expected races were returned\", function() {",
									"    pm.expect(jsonData.includes(\"Dwarf\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Half-Elf\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Human\")).to.be.true;",
									"});"
								]
							}
						}
					],
					"folder": "6df5c7cf-7f8d-46b0-ad97-bc6d3e81fc1a",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that 3 races were returned\", function () {\n    pm.expect(jsonData.length).to.eql(3);\n});\n\npm.test(\"Check that the expected races were returned\", function() {\n    pm.expect(jsonData.includes(\"Dwarf\")).to.be.true;\n    pm.expect(jsonData.includes(\"Half-Elf\")).to.be.true;\n    pm.expect(jsonData.includes(\"Human\")).to.be.true;\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "de66fb01-94bd-4d3d-ab28-24a15ecfe96f",
					"name": "Get Alignments for Bard",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/alignment/Bard",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "f183d1df-da36-4480-9c2f-05361bb8735d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that 5 alignments were returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(5);",
									"});",
									"",
									"pm.test(\"Check that the correct alignments were returned\", function() {",
									"    pm.expect(jsonData.includes(\"Lawful Neutral\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Neutral Good\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"True Neutral\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Neutral Evil\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Chaotic Neutral\")).to.be.true;",
									"});"
								]
							}
						}
					],
					"folder": "c8cdf1d8-3f13-4ed7-9f5f-f7f23f23988a",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that 5 alignments were returned\", function () {\n    pm.expect(jsonData.length).to.eql(5);\n});\n\npm.test(\"Check that the correct alignments were returned\", function() {\n    pm.expect(jsonData.includes(\"Lawful Neutral\")).to.be.true;\n    pm.expect(jsonData.includes(\"Neutral Good\")).to.be.true;\n    pm.expect(jsonData.includes(\"True Neutral\")).to.be.true;\n    pm.expect(jsonData.includes(\"Neutral Evil\")).to.be.true;\n    pm.expect(jsonData.includes(\"Chaotic Neutral\")).to.be.true;\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "e45a897c-04a3-4d69-86f3-9cd784857787",
					"name": "Stat Adjustments for Human",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/statadjust/Human",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "de14ade3-c96a-48a3-96f6-2f6ceb0ce9e2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check that the right adjustments were returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(Object.keys(jsonData).length).to.eql(0);",
									"});"
								]
							}
						}
					],
					"folder": "6df5c7cf-7f8d-46b0-ad97-bc6d3e81fc1a",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\npm.test(\"Check that the right adjustments were returned\", function() {\n    var jsonData = pm.response.json();\n    pm.expect(Object.keys(jsonData).length).to.eql(0);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "e5550d94-dd37-47dd-9092-695ec3724a33",
					"name": "Add New Character",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character",
					"description": "",
					"data": [],
					"dataMode": "raw",
					"headerData": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"method": "POST",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "2fc16979-7ae3-432a-8410-fc15c0bc363d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Post must be successful\", function() {",
									"    pm.expect(pm.response.to.be.success);",
									"});"
								]
							}
						}
					],
					"folder": "d10ba21e-7520-4135-bb13-255f63fbb5d7",
					"preRequestScript": null,
					"tests": "pm.test(\"Post must be successful\", function() {\n    pm.expect(pm.response.to.be.success);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"rawModeData": "{\r\n  \"name\": \"NewTest{{envName}}\"\r\n}",
					"headers": "Content-Type: application/json\n",
					"pathVariables": {}
				},
				{
					"id": "f49602a3-28f3-44b5-98ad-d6bf4264b698",
					"name": "Delete Added Character",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/4",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "DELETE",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "7a4e5eba-b474-4a64-b0f3-d11577a3a770",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Delete must be successful\", function() {",
									"    pm.expect(pm.response.to.be.success);",
									"});"
								]
							}
						}
					],
					"folder": "d10ba21e-7520-4135-bb13-255f63fbb5d7",
					"preRequestScript": null,
					"tests": "pm.test(\"Delete must be successful\", function() {\n    pm.expect(pm.response.to.be.success);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "f90a2a42-60eb-40c7-931f-4d237663be52",
					"name": "Get Alignments for Paladin",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/alignment/Paladin",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "391b407f-20b6-4bfd-9634-3245053cf606",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that 1 alignment was returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"Check that Lawful Good was returned\", function() {",
									"    pm.expect(jsonData.includes(\"Lawful Good\")).to.be.true;",
									"});"
								]
							}
						}
					],
					"folder": "c8cdf1d8-3f13-4ed7-9f5f-f7f23f23988a",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that 1 alignment was returned\", function () {\n    pm.expect(jsonData.length).to.eql(1);\n});\n\npm.test(\"Check that Lawful Good was returned\", function() {\n    pm.expect(jsonData.includes(\"Lawful Good\")).to.be.true;\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "8e6f6956-3ad3-491d-98b8-0368d48c6787",
					"headers": "",
					"pathVariables": {}
				}
			]
		}
	],
	"environments": [
		{
			"id": "022ca39b-e08d-4dc6-83ee-85acecffdfca",
			"name": "DD35_local",
			"values": [
				{
					"key": "siteName",
					"value": "localhost:42001",
					"enabled": true,
					"type": "text"
				},
				{
					"key": "envName",
					"value": "local",
					"enabled": true,
					"type": "text"
				},
				{
					"key": "protocol",
					"value": "http",
					"enabled": true,
					"type": "text"
				}
			]
		},
		{
			"id": "1c3f3f80-b01b-4b47-9a95-08ba53213ff1",
			"name": "ADD2_dev",
			"values": [
				{
					"key": "siteName",
					"value": "add20-dev.azurewebsites.net",
					"enabled": true,
					"type": "text"
				},
				{
					"key": "envName",
					"value": "dev",
					"enabled": true,
					"type": "text"
				},
				{
					"key": "protocol",
					"value": "https",
					"enabled": true,
					"type": "text"
				}
			]
		},
		{
			"id": "2dc13a33-87af-417e-a5e5-feb529546873",
			"name": "DD35-ent-stage",
			"values": [
				{
					"key": "siteName",
					"value": "dd35ent-stage.azurewebsites.net",
					"enabled": true
				},
				{
					"key": "envName",
					"value": "stage",
					"enabled": true
				},
				{
					"key": "protocol",
					"value": "https",
					"description": "",
					"enabled": true
				}
			]
		},
		{
			"id": "3c64dafe-5b43-4267-a013-0606e81d6e78",
			"name": "ADD2_stage",
			"values": [
				{
					"key": "siteName",
					"value": "add20-stage.azurewebsites.net",
					"enabled": true,
					"type": "text"
				},
				{
					"key": "envName",
					"value": "stage",
					"enabled": true,
					"type": "text"
				},
				{
					"key": "protocol",
					"value": "https",
					"description": "",
					"type": "text",
					"enabled": true
				}
			]
		},
		{
			"id": "3cde6b49-78dc-40d8-ab0f-de0deb828ee0",
			"name": "DD35_stage",
			"values": [
				{
					"key": "siteName",
					"value": "dd35-stage.azurewebsites.net",
					"enabled": true,
					"type": "text"
				},
				{
					"key": "envName",
					"value": "stage",
					"enabled": true,
					"type": "text"
				},
				{
					"key": "protocol",
					"value": "https",
					"description": "",
					"type": "text",
					"enabled": true
				}
			]
		},
		{
			"id": "51ce5422-6da0-4063-9239-d6d1b22c8b97",
			"name": "ADD2-ent-prod",
			"values": [
				{
					"key": "siteName",
					"value": "add2ent.azurewebsites.net",
					"enabled": true
				},
				{
					"key": "envName",
					"value": "",
					"enabled": true
				},
				{
					"key": "protocol",
					"value": "https",
					"enabled": true
				}
			]
		},
		{
			"id": "5dbc47ff-d28e-44a9-aa91-1b8463318a04",
			"name": "DD35_dev",
			"values": [
				{
					"key": "siteName",
					"value": "dd35-dev.azurewebsites.net",
					"enabled": true,
					"type": "text"
				},
				{
					"key": "envName",
					"value": "dev",
					"enabled": true,
					"type": "text"
				},
				{
					"key": "protocol",
					"value": "https",
					"enabled": true,
					"type": "text"
				}
			]
		},
		{
			"id": "836d8f6a-6c85-4db6-8fae-8fe588cf26ff",
			"name": "ADD2-ent-stage",
			"values": [
				{
					"key": "siteName",
					"value": "add2ent-stage.azurewebsites.net",
					"enabled": true
				},
				{
					"key": "envName",
					"value": "stage",
					"enabled": true
				},
				{
					"key": "protocol",
					"value": "https",
					"description": "",
					"enabled": true
				}
			]
		},
		{
			"id": "89cb5998-91f6-4704-b12b-d8d4fefd3fbd",
			"name": "DD35-ent-prod",
			"values": [
				{
					"key": "siteName",
					"value": "dd35ent.azurewebsites.net",
					"enabled": true
				},
				{
					"key": "envName",
					"value": "",
					"enabled": true
				},
				{
					"key": "protocol",
					"value": "https",
					"enabled": true
				}
			]
		},
		{
			"id": "9c56ef54-6bda-44cd-84a3-7dd73e5162d2",
			"name": "ADD2-ent-dev",
			"values": [
				{
					"key": "siteName",
					"value": "add2ent-dev.azurewebsites.net",
					"enabled": true
				},
				{
					"key": "envName",
					"value": "dev",
					"enabled": true
				},
				{
					"key": "protocol",
					"value": "https",
					"enabled": true
				}
			]
		},
		{
			"id": "adc438a4-e015-4999-9063-a2c17c75b5c7",
			"name": "ADD2_prod",
			"values": [
				{
					"key": "siteName",
					"value": "add20.azurewebsites.net",
					"enabled": true,
					"type": "text"
				},
				{
					"key": "envName",
					"value": "",
					"enabled": true,
					"type": "text"
				},
				{
					"key": "protocol",
					"value": "https",
					"enabled": true,
					"type": "text"
				}
			]
		},
		{
			"id": "ae724db6-171b-4ac5-9910-7c771f4452fc",
			"name": "DD35_prod",
			"values": [
				{
					"key": "siteName",
					"value": "dd35.azurewebsites.net",
					"enabled": true,
					"type": "text"
				},
				{
					"key": "envName",
					"value": "",
					"enabled": true,
					"type": "text"
				},
				{
					"key": "protocol",
					"value": "https",
					"enabled": true,
					"type": "text"
				}
			]
		},
		{
			"id": "be48cdc2-d526-48c2-9b49-6215124d10fb",
			"name": "DD35-ent-dev",
			"values": [
				{
					"key": "siteName",
					"value": "dd35ent-dev.azurewebsites.net",
					"enabled": true
				},
				{
					"key": "envName",
					"value": "dev",
					"enabled": true
				},
				{
					"key": "protocol",
					"value": "https",
					"enabled": true
				}
			]
		},
		{
			"id": "f8e2482f-37a7-4e9f-9779-1887d3492c66",
			"name": "ADD2_local",
			"values": [
				{
					"key": "siteName",
					"value": "localhost:42000",
					"enabled": true,
					"type": "text"
				},
				{
					"key": "envName",
					"value": "local",
					"enabled": true,
					"type": "text"
				},
				{
					"key": "protocol",
					"value": "http",
					"enabled": true,
					"type": "text"
				}
			]
		}
	],
	"headerPresets": [],
	"globals": []
}