{
	"version": 1,
	"collections": [
		{
			"id": "41e06957-5309-443c-8524-882130d29f15",
			"name": "AD&D  2nd Ed",
			"description": "",
			"auth": null,
			"events": null,
			"variables": [],
			"order": [],
			"folders_order": [
				"31acbe5a-a999-405b-9aaa-d2015a624750",
				"97a7c904-b74c-4072-9e26-5ef1a08e5627",
				"d8ce8c27-eded-46c5-9817-fde7f48da019",
				"6c8db3de-4249-430d-b9e0-e88ce14212bd",
				"1639f8c9-305a-474a-8fd5-7ac6f6154509"
			],
			"folders": [
				{
					"id": "1639f8c9-305a-474a-8fd5-7ac6f6154509",
					"name": "Alignment Selection",
					"description": "",
					"auth": null,
					"events": null,
					"collection": "41e06957-5309-443c-8524-882130d29f15",
					"folder": null,
					"order": [
						"b2e4bdfb-4be9-40b3-9500-d43d402bd096",
						"f75b39f6-db1e-4632-942e-e3dcf0b43993",
						"44190db2-0284-4f48-b553-3c74f1da32ac"
					],
					"folders_order": [],
					"collectionId": "41e06957-5309-443c-8524-882130d29f15",
					"folderId": "1639f8c9-305a-474a-8fd5-7ac6f6154509"
				},
				{
					"id": "6c8db3de-4249-430d-b9e0-e88ce14212bd",
					"name": "Class Selection",
					"description": "",
					"auth": null,
					"events": null,
					"collection": "41e06957-5309-443c-8524-882130d29f15",
					"folder": null,
					"order": [
						"a9de4dfa-837a-41e4-a9d8-29e197bac833",
						"e3e8b5ca-c1e7-4784-b7d4-4f49ffe94ce6"
					],
					"folders_order": [],
					"collectionId": "41e06957-5309-443c-8524-882130d29f15",
					"folderId": "6c8db3de-4249-430d-b9e0-e88ce14212bd"
				},
				{
					"id": "31acbe5a-a999-405b-9aaa-d2015a624750",
					"name": "CrudOps",
					"description": "",
					"auth": null,
					"events": null,
					"collection": "41e06957-5309-443c-8524-882130d29f15",
					"folder": null,
					"order": [
						"9559b10d-e712-490d-bf7c-2e2229917a74",
						"6039c948-1852-46b6-a29a-f32589c69b22",
						"a9d6bb8d-2f3f-4647-930c-c11ce1512184",
						"b0a5ebdd-1642-4318-9f24-a9dc2e7d3f4d",
						"24d2c4d0-c4cd-4d50-abdf-5927519335cf",
						"3989b61e-5078-4a4b-8da5-3c7c370c7cde",
						"06816ad9-2231-4db3-9535-6da939157c06",
						"f8ca4f06-b62c-488d-87ef-d046543f3c24",
						"87eda378-d9d3-41ba-850d-3ed140ffd8ee",
						"71c01024-01a1-46a3-b885-0783ea239965"
					],
					"folders_order": [],
					"collectionId": "41e06957-5309-443c-8524-882130d29f15",
					"folderId": "31acbe5a-a999-405b-9aaa-d2015a624750"
				},
				{
					"id": "d8ce8c27-eded-46c5-9817-fde7f48da019",
					"name": "Race Selection",
					"description": "",
					"auth": null,
					"events": null,
					"collection": "41e06957-5309-443c-8524-882130d29f15",
					"folder": null,
					"order": [
						"eab7c456-d898-4819-b693-473f06c8d10f",
						"8379160f-3880-44f8-ab25-8bcd6a37c7d0",
						"188abb85-2026-4021-81a4-a7ee64eb2880",
						"9b095273-31b8-4af8-ad73-93d6dab3d7c4",
						"0223eec6-3d14-48d4-8ecd-1611479d6827",
						"6218e52e-bd92-4058-a57d-9406135b6dfd",
						"5de9e6df-90ac-4d28-b2ce-642620d3b96f"
					],
					"folders_order": [],
					"collectionId": "41e06957-5309-443c-8524-882130d29f15",
					"folderId": "d8ce8c27-eded-46c5-9817-fde7f48da019"
				},
				{
					"id": "97a7c904-b74c-4072-9e26-5ef1a08e5627",
					"name": "Stat Rolling",
					"description": "",
					"auth": null,
					"events": null,
					"collection": "41e06957-5309-443c-8524-882130d29f15",
					"folder": null,
					"order": [
						"14e1260f-03af-4680-bef0-417415a354ee",
						"74ecf133-238c-4e30-8f6b-437b75ab25e4",
						"8efa97cd-0c6c-4464-b54b-cb83d3a85ae4"
					],
					"folders_order": [],
					"collectionId": "41e06957-5309-443c-8524-882130d29f15",
					"folderId": "97a7c904-b74c-4072-9e26-5ef1a08e5627"
				}
			],
			"requests": [
				{
					"id": "0223eec6-3d14-48d4-8ecd-1611479d6827",
					"name": "Stat Adjustments for Human",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/statadjust/Human",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "de14ade3-c96a-48a3-96f6-2f6ceb0ce9e2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check that the right adjustments were returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(Object.keys(jsonData).length).to.eql(0);",
									"});"
								]
							}
						}
					],
					"folder": "d8ce8c27-eded-46c5-9817-fde7f48da019",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\npm.test(\"Check that the right adjustments were returned\", function() {\n    var jsonData = pm.response.json();\n    pm.expect(Object.keys(jsonData).length).to.eql(0);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "41e06957-5309-443c-8524-882130d29f15",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "06816ad9-2231-4db3-9535-6da939157c06",
					"name": "Get Updated Character",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/4",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "7610d9b2-cc2e-476a-9647-13259b7eec3f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check that all properties of character were updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(4);",
									"    pm.expect(jsonData.name).to.eql(\"new toon\" + pm.environment.get(\"envName\"));",
									"    pm.expect(jsonData.playedBy).to.eql(\"new person\" + pm.environment.get(\"envName\"));",
									"    pm.expect(jsonData.str).to.eql(10);",
									"    pm.expect(jsonData.dex).to.eql(18);",
									"    pm.expect(jsonData.con).to.eql(13);",
									"    pm.expect(jsonData.int).to.eql(9);",
									"    pm.expect(jsonData.wis).to.eql(7);",
									"    pm.expect(jsonData.chr).to.eql(11);",
									"    pm.expect(jsonData.race).to.eql(\"Human\");",
									"    pm.expect(jsonData.gender).to.eql(\"M\");",
									"    pm.expect(jsonData.height).to.eql(65);",
									"    pm.expect(jsonData.weight).to.eql(150);",
									"    pm.expect(jsonData.age).to.eql(20);",
									"    pm.expect(jsonData.className).to.eql(\"Thief\");",
									"    pm.expect(jsonData.alignment).to.eql(\"Chaotic Good\");",
									"});"
								]
							}
						}
					],
					"folder": "31acbe5a-a999-405b-9aaa-d2015a624750",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\npm.test(\"Check that all properties of character were updated\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.id).to.eql(4);\n    pm.expect(jsonData.name).to.eql(\"new toon\" + pm.environment.get(\"envName\"));\n    pm.expect(jsonData.playedBy).to.eql(\"new person\" + pm.environment.get(\"envName\"));\n    pm.expect(jsonData.str).to.eql(10);\n    pm.expect(jsonData.dex).to.eql(18);\n    pm.expect(jsonData.con).to.eql(13);\n    pm.expect(jsonData.int).to.eql(9);\n    pm.expect(jsonData.wis).to.eql(7);\n    pm.expect(jsonData.chr).to.eql(11);\n    pm.expect(jsonData.race).to.eql(\"Human\");\n    pm.expect(jsonData.gender).to.eql(\"M\");\n    pm.expect(jsonData.height).to.eql(65);\n    pm.expect(jsonData.weight).to.eql(150);\n    pm.expect(jsonData.age).to.eql(20);\n    pm.expect(jsonData.className).to.eql(\"Thief\");\n    pm.expect(jsonData.alignment).to.eql(\"Chaotic Good\");\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "41e06957-5309-443c-8524-882130d29f15",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "14e1260f-03af-4680-bef0-417415a354ee",
					"name": "RollOnce",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/rollstats/rollonce",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "85b624ab-48ca-4e46-96e7-da99baaa18eb",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that 6 rolls were made\", function () {",
									"    pm.expect(jsonData.length).to.eql(6);",
									"});",
									"",
									"pm.test(\"Check that each roll had 3 dice in it\", function() {",
									"    for(var i = 0; i < jsonData.length; i++)",
									"        pm.expect(jsonData[i].length).to.eql(3);",
									"});",
									"",
									"pm.test(\"Check that each roll was within expected bounds\", function() {",
									"    for(var i = 0; i < jsonData.length; i++)",
									"        pm.expect(jsonData[i].reduce(function(acc, val) {return acc + val;})).to.be.gte(3).and.lte(18);",
									"});"
								]
							}
						}
					],
					"folder": "97a7c904-b74c-4072-9e26-5ef1a08e5627",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that 6 rolls were made\", function () {\n    pm.expect(jsonData.length).to.eql(6);\n});\n\npm.test(\"Check that each roll had 3 dice in it\", function() {\n    for(var i = 0; i < jsonData.length; i++)\n        pm.expect(jsonData[i].length).to.eql(3);\n});\n\npm.test(\"Check that each roll was within expected bounds\", function() {\n    for(var i = 0; i < jsonData.length; i++)\n        pm.expect(jsonData[i].reduce(function(acc, val) {return acc + val;})).to.be.gte(3).and.lte(18);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "41e06957-5309-443c-8524-882130d29f15",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "188abb85-2026-4021-81a4-a7ee64eb2880",
					"name": "Races Available for the Most Unlucky Stat Roller Ever",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/races/3/3/3/3/3/3",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "289d0a83-fd86-455e-a103-06f78b5118b4",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that 1 race was returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"Check that human was returned\", function() {",
									"    pm.expect(jsonData.includes(\"Human\")).to.be.true;",
									"});"
								]
							}
						}
					],
					"folder": "d8ce8c27-eded-46c5-9817-fde7f48da019",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that 1 race was returned\", function () {\n    pm.expect(jsonData.length).to.eql(1);\n});\n\npm.test(\"Check that human was returned\", function() {\n    pm.expect(jsonData.includes(\"Human\")).to.be.true;\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "41e06957-5309-443c-8524-882130d29f15",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "24d2c4d0-c4cd-4d50-abdf-5927519335cf",
					"name": "Get New Character",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/4",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "f36966a4-4b8d-4fd5-a701-bb629e55c959",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check Id, name, playedBy and stats of character id 4\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(4);",
									"    pm.expect(jsonData.name).to.eql(\"NewTest\" + pm.environment.get(\"envName\"));",
									"    pm.expect(jsonData.playedBy).to.eql(\"AnotherNewTest\" + pm.environment.get(\"envName\"));",
									"    pm.expect(jsonData.str).to.eql(0);",
									"    pm.expect(jsonData.dex).to.eql(0);",
									"    pm.expect(jsonData.con).to.eql(0);",
									"    pm.expect(jsonData.int).to.eql(0);",
									"    pm.expect(jsonData.wis).to.eql(0);",
									"    pm.expect(jsonData.chr).to.eql(0);",
									"});"
								]
							}
						}
					],
					"folder": "31acbe5a-a999-405b-9aaa-d2015a624750",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\npm.test(\"Check Id, name, playedBy and stats of character id 4\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.id).to.eql(4);\n    pm.expect(jsonData.name).to.eql(\"NewTest\" + pm.environment.get(\"envName\"));\n    pm.expect(jsonData.playedBy).to.eql(\"AnotherNewTest\" + pm.environment.get(\"envName\"));\n    pm.expect(jsonData.str).to.eql(0);\n    pm.expect(jsonData.dex).to.eql(0);\n    pm.expect(jsonData.con).to.eql(0);\n    pm.expect(jsonData.int).to.eql(0);\n    pm.expect(jsonData.wis).to.eql(0);\n    pm.expect(jsonData.chr).to.eql(0);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "41e06957-5309-443c-8524-882130d29f15",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "3989b61e-5078-4a4b-8da5-3c7c370c7cde",
					"name": "Update Added Character",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/4",
					"description": "",
					"data": [],
					"dataMode": "raw",
					"headerData": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"method": "PUT",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "4bd886ea-b68f-4636-8b5d-204f6135cff8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Put must be successful\", function() {",
									"    pm.expect(pm.response.to.be.success);",
									"});"
								]
							}
						}
					],
					"folder": "31acbe5a-a999-405b-9aaa-d2015a624750",
					"preRequestScript": null,
					"tests": "pm.test(\"Put must be successful\", function() {\n    pm.expect(pm.response.to.be.success);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "41e06957-5309-443c-8524-882130d29f15",
					"rawModeData": "{\r\n  \"name\":\"new toon{{envName}}\",\r\n  \"playedBy\":\"new person{{envName}}\",\r\n  \"str\":10,\r\n  \"dex\":18,\r\n  \"con\":13,\r\n  \"int\":9,\r\n  \"wis\":7,\r\n  \"chr\":11,\r\n  \"race\":\"Human\",\r\n  \"gender\":\"M\",\r\n  \"height\":\"65\",\r\n  \"weight\":\"150\",\r\n  \"age\":\"20\",\r\n  \"classname\":\"Thief\",\r\n  \"alignment\":\"Chaotic Good\"\r\n}",
					"headers": "Content-Type: application/json\n",
					"pathVariables": {}
				},
				{
					"id": "44190db2-0284-4f48-b553-3c74f1da32ac",
					"name": "Get Alignments for Cleric",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/alignment/Cleric",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "b31fa013-9bbf-4c4d-baee-55e867987f33",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that all 9 alignments were returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(9);",
									"});",
									"",
									"pm.test(\"Check that all the alignments were returned\", function() {",
									"    pm.expect(jsonData.includes(\"Lawful Good\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Lawful Neutral\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Lawful Evil\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Neutral Good\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"True Neutral\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Neutral Evil\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Chaotic Good\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Chaotic Neutral\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Chaotic Evil\")).to.be.true;",
									"});"
								]
							}
						}
					],
					"folder": "1639f8c9-305a-474a-8fd5-7ac6f6154509",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that all 9 alignments were returned\", function () {\n    pm.expect(jsonData.length).to.eql(9);\n});\n\npm.test(\"Check that all the alignments were returned\", function() {\n    pm.expect(jsonData.includes(\"Lawful Good\")).to.be.true;\n    pm.expect(jsonData.includes(\"Lawful Neutral\")).to.be.true;\n    pm.expect(jsonData.includes(\"Lawful Evil\")).to.be.true;\n    pm.expect(jsonData.includes(\"Neutral Good\")).to.be.true;\n    pm.expect(jsonData.includes(\"True Neutral\")).to.be.true;\n    pm.expect(jsonData.includes(\"Neutral Evil\")).to.be.true;\n    pm.expect(jsonData.includes(\"Chaotic Good\")).to.be.true;\n    pm.expect(jsonData.includes(\"Chaotic Neutral\")).to.be.true;\n    pm.expect(jsonData.includes(\"Chaotic Evil\")).to.be.true;\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "41e06957-5309-443c-8524-882130d29f15",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "5de9e6df-90ac-4d28-b2ce-642620d3b96f",
					"name": "Starting Height/Weight/Age for Half-Elf Female",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/hwa/half-elf/f",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "3d434e8d-7932-4918-81be-c851ed068377",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that the height was in the correct range\", function() {",
									"    pm.expect(jsonData[0]).to.be.above(59).and.below(71);",
									"});",
									"",
									"pm.test(\"Check that the weight was in the correct range\", function() {",
									"    pm.expect(jsonData[1]).to.be.above(87).and.below(122);",
									"});",
									"",
									"pm.test(\"Check that the age was in the correct range\", function() {",
									"    pm.expect(jsonData[2]).to.be.above(15).and.below(22);",
									"});"
								]
							}
						}
					],
					"folder": "d8ce8c27-eded-46c5-9817-fde7f48da019",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that the height was in the correct range\", function() {\n    pm.expect(jsonData[0]).to.be.above(59).and.below(71);\n});\n\npm.test(\"Check that the weight was in the correct range\", function() {\n    pm.expect(jsonData[1]).to.be.above(87).and.below(122);\n});\n\npm.test(\"Check that the age was in the correct range\", function() {\n    pm.expect(jsonData[2]).to.be.above(15).and.below(22);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "41e06957-5309-443c-8524-882130d29f15",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "6039c948-1852-46b6-a29a-f32589c69b22",
					"name": "GetId1",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/1",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "f866e231-d075-4fa0-bd17-b6440d4de225",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check Id, name and playedBy of character id 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(1);",
									"    pm.expect(jsonData.name).to.eql(\"Test1\");",
									"    pm.expect(jsonData.playedBy).to.eql(\"Test1\");",
									"});"
								]
							}
						}
					],
					"folder": "31acbe5a-a999-405b-9aaa-d2015a624750",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\npm.test(\"Check Id, name and playedBy of character id 1\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.id).to.eql(1);\n    pm.expect(jsonData.name).to.eql(\"Test1\");\n    pm.expect(jsonData.playedBy).to.eql(\"Test1\");\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "41e06957-5309-443c-8524-882130d29f15",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "6218e52e-bd92-4058-a57d-9406135b6dfd",
					"name": "Starting Height/Weight/Age for Dwarf Male",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/hwa/dwarf/m",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "1b5efdf6-dc16-457e-9a36-97ef655765fe",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that the height was in the correct range\", function() {",
									"    pm.expect(jsonData[0]).to.be.above(43).and.below(54);",
									"});",
									"",
									"pm.test(\"Check that the weight was in the correct range\", function() {",
									"    pm.expect(jsonData[1]).to.be.above(133).and.below(171);",
									"});",
									"",
									"pm.test(\"Check that the age was in the correct range\", function() {",
									"    pm.expect(jsonData[2]).to.be.above(44).and.below(71);",
									"});"
								]
							}
						}
					],
					"folder": "d8ce8c27-eded-46c5-9817-fde7f48da019",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that the height was in the correct range\", function() {\n    pm.expect(jsonData[0]).to.be.above(43).and.below(54);\n});\n\npm.test(\"Check that the weight was in the correct range\", function() {\n    pm.expect(jsonData[1]).to.be.above(133).and.below(171);\n});\n\npm.test(\"Check that the age was in the correct range\", function() {\n    pm.expect(jsonData[2]).to.be.above(44).and.below(71);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "41e06957-5309-443c-8524-882130d29f15",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "71c01024-01a1-46a3-b885-0783ea239965",
					"name": "Delete Added Character",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/4",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "DELETE",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "7a4e5eba-b474-4a64-b0f3-d11577a3a770",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Delete must be successful\", function() {",
									"    pm.expect(pm.response.to.be.success);",
									"});"
								]
							}
						}
					],
					"folder": "31acbe5a-a999-405b-9aaa-d2015a624750",
					"preRequestScript": null,
					"tests": "pm.test(\"Delete must be successful\", function() {\n    pm.expect(pm.response.to.be.success);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "41e06957-5309-443c-8524-882130d29f15",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "74ecf133-238c-4e30-8f6b-437b75ab25e4",
					"name": "Add 7 Dice",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/rollstats/AddSevenDice",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "b5f247b8-e76e-4d68-81e8-074083d65838",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that 7 rolls were made\", function () {",
									"    pm.expect(jsonData.length).to.eql(7);",
									"});",
									"",
									"pm.test(\"Check that each roll had 1 die in it\", function() {",
									"    for(var i = 0; i < jsonData.length; i++)",
									"        pm.expect(jsonData[i].length).to.eql(1);",
									"});",
									"",
									"pm.test(\"Check that each roll was within expected bounds\", function() {",
									"    for(var i = 0; i < jsonData.length; i++)",
									"        pm.expect(jsonData[i].reduce(function(acc, val) {return acc + val;})).to.be.gte(1).and.lte(6);",
									"});"
								]
							}
						}
					],
					"folder": "97a7c904-b74c-4072-9e26-5ef1a08e5627",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that 7 rolls were made\", function () {\n    pm.expect(jsonData.length).to.eql(7);\n});\n\npm.test(\"Check that each roll had 1 die in it\", function() {\n    for(var i = 0; i < jsonData.length; i++)\n        pm.expect(jsonData[i].length).to.eql(1);\n});\n\npm.test(\"Check that each roll was within expected bounds\", function() {\n    for(var i = 0; i < jsonData.length; i++)\n        pm.expect(jsonData[i].reduce(function(acc, val) {return acc + val;})).to.be.gte(1).and.lte(6);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "41e06957-5309-443c-8524-882130d29f15",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "8379160f-3880-44f8-ab25-8bcd6a37c7d0",
					"name": "Races Available with High Stats",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/races/17/17/17/17/17/17",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "9fe87da8-88cf-48e1-b531-241cd9e5cc4a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that 6 races were returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(6);",
									"});",
									"",
									"pm.test(\"Check that the expected races were returned\", function() {",
									"    pm.expect(jsonData.includes(\"Dwarf\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Elf\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Gnome\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Half-Elf\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Halfling\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Human\")).to.be.true;",
									"});"
								]
							}
						}
					],
					"folder": "d8ce8c27-eded-46c5-9817-fde7f48da019",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that 6 races were returned\", function () {\n    pm.expect(jsonData.length).to.eql(6);\n});\n\npm.test(\"Check that the expected races were returned\", function() {\n    pm.expect(jsonData.includes(\"Dwarf\")).to.be.true;\n    pm.expect(jsonData.includes(\"Elf\")).to.be.true;\n    pm.expect(jsonData.includes(\"Gnome\")).to.be.true;\n    pm.expect(jsonData.includes(\"Half-Elf\")).to.be.true;\n    pm.expect(jsonData.includes(\"Halfling\")).to.be.true;\n    pm.expect(jsonData.includes(\"Human\")).to.be.true;\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "41e06957-5309-443c-8524-882130d29f15",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "87eda378-d9d3-41ba-850d-3ed140ffd8ee",
					"name": "Get Final Updated Character",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/4",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "5c54d903-ee83-4939-9914-05aa78876606",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check that all properties of character were updated and in the expected ranges\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(4);",
									"    pm.expect(jsonData.name).to.eql(\"new toon\" + pm.environment.get(\"envName\"));",
									"    pm.expect(jsonData.playedBy).to.eql(\"new person\" + pm.environment.get(\"envName\"));",
									"    pm.expect(jsonData.str).to.eql(10);",
									"    pm.expect(jsonData.dex).to.eql(18);",
									"    pm.expect(jsonData.con).to.eql(13);",
									"    pm.expect(jsonData.int).to.eql(9);",
									"    pm.expect(jsonData.wis).to.eql(7);",
									"    pm.expect(jsonData.chr).to.eql(11);",
									"    pm.expect(jsonData.race).to.eql(\"Human\");",
									"    pm.expect(jsonData.gender).to.eql(\"M\");",
									"    pm.expect(jsonData.height).to.eql(65);",
									"    pm.expect(jsonData.weight).to.eql(150);",
									"    pm.expect(jsonData.age).to.eql(20);",
									"    pm.expect(jsonData.className).to.eql(\"Thief\");",
									"    pm.expect(jsonData.alignment).to.eql(\"Chaotic Good\");",
									"    pm.expect(jsonData.hp).to.be.gte(1).and.lte(6);",
									"    pm.expect(jsonData.paralyze).to.eql(13);",
									"    pm.expect(jsonData.rod).to.eql(14);",
									"    pm.expect(jsonData.petrification).to.eql(12);",
									"    pm.expect(jsonData.breath).to.eql(16);",
									"    pm.expect(jsonData.spell).to.eql(15);",
									"    pm.expect(jsonData.moveRate).to.eql(12);",
									"    pm.expect(jsonData.funds).to.be.gte(20).and.lte(120);",
									"});"
								]
							}
						}
					],
					"folder": "31acbe5a-a999-405b-9aaa-d2015a624750",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\npm.test(\"Check that all properties of character were updated and in the expected ranges\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.id).to.eql(4);\n    pm.expect(jsonData.name).to.eql(\"new toon\" + pm.environment.get(\"envName\"));\n    pm.expect(jsonData.playedBy).to.eql(\"new person\" + pm.environment.get(\"envName\"));\n    pm.expect(jsonData.str).to.eql(10);\n    pm.expect(jsonData.dex).to.eql(18);\n    pm.expect(jsonData.con).to.eql(13);\n    pm.expect(jsonData.int).to.eql(9);\n    pm.expect(jsonData.wis).to.eql(7);\n    pm.expect(jsonData.chr).to.eql(11);\n    pm.expect(jsonData.race).to.eql(\"Human\");\n    pm.expect(jsonData.gender).to.eql(\"M\");\n    pm.expect(jsonData.height).to.eql(65);\n    pm.expect(jsonData.weight).to.eql(150);\n    pm.expect(jsonData.age).to.eql(20);\n    pm.expect(jsonData.className).to.eql(\"Thief\");\n    pm.expect(jsonData.alignment).to.eql(\"Chaotic Good\");\n    pm.expect(jsonData.hp).to.be.gte(1).and.lte(6);\n    pm.expect(jsonData.paralyze).to.eql(13);\n    pm.expect(jsonData.rod).to.eql(14);\n    pm.expect(jsonData.petrification).to.eql(12);\n    pm.expect(jsonData.breath).to.eql(16);\n    pm.expect(jsonData.spell).to.eql(15);\n    pm.expect(jsonData.moveRate).to.eql(12);\n    pm.expect(jsonData.funds).to.be.gte(20).and.lte(120);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "41e06957-5309-443c-8524-882130d29f15",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "8efa97cd-0c6c-4464-b54b-cb83d3a85ae4",
					"name": "Invalid Roll Rule",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/rollstats/invalid",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "026dfdbd-8d67-47f0-8f46-f9bae063fecc",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be 400 - bad request\", function() {",
									"    pm.response.to.be.clientError;",
									"});"
								]
							}
						}
					],
					"folder": "97a7c904-b74c-4072-9e26-5ef1a08e5627",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be 400 - bad request\", function() {\n    pm.response.to.be.clientError;\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "41e06957-5309-443c-8524-882130d29f15",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "9559b10d-e712-490d-bf7c-2e2229917a74",
					"name": "GetAll",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "55702324-2339-4279-813d-04217925e7e7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check 3 seed characters exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    var first = jsonData.find(x => x.id === 1);",
									"    pm.expect(first.name).to.eql(\"Test1\");",
									"    pm.expect(first.playedBy).to.eql(\"Test1\");",
									"    var second = jsonData.find(x => x.id === 2 );",
									"    pm.expect(second.name).to.eql(\"Someone\");",
									"    pm.expect(second.playedBy).to.eql(\"Somebody\");",
									"    var third = jsonData.find(x => x.id === 3);",
									"    pm.expect(third.name).to.eql(\"Person\");",
									"    pm.expect(third.playedBy).to.eql(\"A Person\");",
									"});"
								]
							}
						}
					],
					"folder": "31acbe5a-a999-405b-9aaa-d2015a624750",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\npm.test(\"Check 3 seed characters exist\", function () {\n    var jsonData = pm.response.json();\n    var first = jsonData.find(x => x.id === 1);\n    pm.expect(first.name).to.eql(\"Test1\");\n    pm.expect(first.playedBy).to.eql(\"Test1\");\n    var second = jsonData.find(x => x.id === 2 );\n    pm.expect(second.name).to.eql(\"Someone\");\n    pm.expect(second.playedBy).to.eql(\"Somebody\");\n    var third = jsonData.find(x => x.id === 3);\n    pm.expect(third.name).to.eql(\"Person\");\n    pm.expect(third.playedBy).to.eql(\"A Person\");\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "41e06957-5309-443c-8524-882130d29f15",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "9b095273-31b8-4af8-ad73-93d6dab3d7c4",
					"name": "Stat Adjustments for Gnome",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/statadjust/gnome",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "4572370a-0be6-4664-a9fa-fa64c4635782",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check that the right adjustments were returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.int).to.eql(1);",
									"    pm.expect(jsonData.wis).to.eql(-1);",
									"});"
								]
							}
						}
					],
					"folder": "d8ce8c27-eded-46c5-9817-fde7f48da019",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\npm.test(\"Check that the right adjustments were returned\", function() {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.int).to.eql(1);\n    pm.expect(jsonData.wis).to.eql(-1);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "41e06957-5309-443c-8524-882130d29f15",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "a9d6bb8d-2f3f-4647-930c-c11ce1512184",
					"name": "Add New Character",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/new",
					"description": "",
					"data": [],
					"dataMode": "raw",
					"headerData": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"method": "POST",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "2fc16979-7ae3-432a-8410-fc15c0bc363d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Post must be successful\", function() {",
									"    pm.expect(pm.response.to.be.success);",
									"});"
								]
							}
						}
					],
					"folder": "31acbe5a-a999-405b-9aaa-d2015a624750",
					"preRequestScript": null,
					"tests": "pm.test(\"Post must be successful\", function() {\n    pm.expect(pm.response.to.be.success);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "41e06957-5309-443c-8524-882130d29f15",
					"rawModeData": "{\r\n  \"name\": \"NewTest{{envName}}\",\r\n  \"playedBy\": \"AnotherNewTest{{envName}}\"\r\n}",
					"headers": "Content-Type: application/json\n",
					"pathVariables": {}
				},
				{
					"id": "a9de4dfa-837a-41e4-a9d8-29e197bac833",
					"name": "Classes Available for Average Human",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/classes/Human/9/9/9/9/9/9",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "e87cfce8-8ae4-4ba8-b1f9-454362c2b924",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that 4 classes were returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(4);",
									"});",
									"",
									"pm.test(\"Check that the expected classes were returned\", function() {",
									"    pm.expect(jsonData.includes(\"Fighter\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Mage\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Cleric\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Thief\")).to.be.true;",
									"});"
								]
							}
						}
					],
					"folder": "6c8db3de-4249-430d-b9e0-e88ce14212bd",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that 4 classes were returned\", function () {\n    pm.expect(jsonData.length).to.eql(4);\n});\n\npm.test(\"Check that the expected classes were returned\", function() {\n    pm.expect(jsonData.includes(\"Fighter\")).to.be.true;\n    pm.expect(jsonData.includes(\"Mage\")).to.be.true;\n    pm.expect(jsonData.includes(\"Cleric\")).to.be.true;\n    pm.expect(jsonData.includes(\"Thief\")).to.be.true;\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "41e06957-5309-443c-8524-882130d29f15",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "b0a5ebdd-1642-4318-9f24-a9dc2e7d3f4d",
					"name": "Attempt to Add Duplicate Character",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/new",
					"description": "",
					"data": [],
					"dataMode": "raw",
					"headerData": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"method": "POST",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "a73dcfb2-5334-4ab2-81bc-1b7ea3bcd6ba",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Post should return 400\", function() {",
									"    pm.expect(pm.response.to.be.clientError);",
									"});"
								]
							}
						}
					],
					"folder": "31acbe5a-a999-405b-9aaa-d2015a624750",
					"preRequestScript": null,
					"tests": "pm.test(\"Post should return 400\", function() {\n    pm.expect(pm.response.to.be.clientError);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "41e06957-5309-443c-8524-882130d29f15",
					"rawModeData": "{\r\n  \"name\": \"NewTest{{envName}}\",\r\n  \"playedBy\": \"AnotherNewTest{{envName}}\"\r\n}",
					"headers": "Content-Type: application/json\n",
					"pathVariables": {}
				},
				{
					"id": "b2e4bdfb-4be9-40b3-9500-d43d402bd096",
					"name": "Get Alignments for Paladin",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/alignment/Paladin",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "391b407f-20b6-4bfd-9634-3245053cf606",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that 1 alignment was returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"Check that Lawful Good was returned\", function() {",
									"    pm.expect(jsonData.includes(\"Lawful Good\")).to.be.true;",
									"});"
								]
							}
						}
					],
					"folder": "1639f8c9-305a-474a-8fd5-7ac6f6154509",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that 1 alignment was returned\", function () {\n    pm.expect(jsonData.length).to.eql(1);\n});\n\npm.test(\"Check that Lawful Good was returned\", function() {\n    pm.expect(jsonData.includes(\"Lawful Good\")).to.be.true;\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "41e06957-5309-443c-8524-882130d29f15",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "e3e8b5ca-c1e7-4784-b7d4-4f49ffe94ce6",
					"name": "Classes Available for Gnome",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/classes/Gnome/8/18/10/13/18/9",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "48d4b257-5597-43a7-9b74-0515c0d95f6e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that 3 classes were returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(3);",
									"});",
									"",
									"pm.test(\"Check that the expected classes were returned\", function() {",
									"    pm.expect(jsonData.includes(\"Cleric\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Thief\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Cleric/Thief\")).to.be.true;",
									"});"
								]
							}
						}
					],
					"folder": "6c8db3de-4249-430d-b9e0-e88ce14212bd",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that 3 classes were returned\", function () {\n    pm.expect(jsonData.length).to.eql(3);\n});\n\npm.test(\"Check that the expected classes were returned\", function() {\n    pm.expect(jsonData.includes(\"Cleric\")).to.be.true;\n    pm.expect(jsonData.includes(\"Thief\")).to.be.true;\n    pm.expect(jsonData.includes(\"Cleric/Thief\")).to.be.true;\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "41e06957-5309-443c-8524-882130d29f15",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "eab7c456-d898-4819-b693-473f06c8d10f",
					"name": "Races Available with Low Stats",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/races/8/7/11/5/3/8",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "6844fe5c-066b-4b71-9df8-e7b02d273d5b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that 3 races were returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(3);",
									"});",
									"",
									"pm.test(\"Check that the expected races were returned\", function() {",
									"    pm.expect(jsonData.includes(\"Dwarf\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Half-Elf\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Human\")).to.be.true;",
									"});"
								]
							}
						}
					],
					"folder": "d8ce8c27-eded-46c5-9817-fde7f48da019",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that 3 races were returned\", function () {\n    pm.expect(jsonData.length).to.eql(3);\n});\n\npm.test(\"Check that the expected races were returned\", function() {\n    pm.expect(jsonData.includes(\"Dwarf\")).to.be.true;\n    pm.expect(jsonData.includes(\"Half-Elf\")).to.be.true;\n    pm.expect(jsonData.includes(\"Human\")).to.be.true;\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "41e06957-5309-443c-8524-882130d29f15",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "f75b39f6-db1e-4632-942e-e3dcf0b43993",
					"name": "Get Alignments for Bard",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/alignment/Bard",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "f183d1df-da36-4480-9c2f-05361bb8735d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that 5 alignments were returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(5);",
									"});",
									"",
									"pm.test(\"Check that the correct alignments were returned\", function() {",
									"    pm.expect(jsonData.includes(\"Lawful Neutral\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Neutral Good\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"True Neutral\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Neutral Evil\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Chaotic Neutral\")).to.be.true;",
									"});"
								]
							}
						}
					],
					"folder": "1639f8c9-305a-474a-8fd5-7ac6f6154509",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that 5 alignments were returned\", function () {\n    pm.expect(jsonData.length).to.eql(5);\n});\n\npm.test(\"Check that the correct alignments were returned\", function() {\n    pm.expect(jsonData.includes(\"Lawful Neutral\")).to.be.true;\n    pm.expect(jsonData.includes(\"Neutral Good\")).to.be.true;\n    pm.expect(jsonData.includes(\"True Neutral\")).to.be.true;\n    pm.expect(jsonData.includes(\"Neutral Evil\")).to.be.true;\n    pm.expect(jsonData.includes(\"Chaotic Neutral\")).to.be.true;\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "41e06957-5309-443c-8524-882130d29f15",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "f8ca4f06-b62c-488d-87ef-d046543f3c24",
					"name": "Final Update Added Character",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/4/final",
					"description": "",
					"data": [],
					"dataMode": "raw",
					"headerData": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"method": "PUT",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "4bd886ea-b68f-4636-8b5d-204f6135cff8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Put must be successful\", function() {",
									"    pm.expect(pm.response.to.be.success);",
									"});"
								]
							}
						}
					],
					"folder": "31acbe5a-a999-405b-9aaa-d2015a624750",
					"preRequestScript": null,
					"tests": "pm.test(\"Put must be successful\", function() {\n    pm.expect(pm.response.to.be.success);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "41e06957-5309-443c-8524-882130d29f15",
					"rawModeData": "{\r\n  \"name\":\"new toon{{envName}}\",\r\n  \"playedBy\":\"new person{{envName}}\",\r\n  \"str\":10,\r\n  \"dex\":18,\r\n  \"con\":13,\r\n  \"int\":9,\r\n  \"wis\":7,\r\n  \"chr\":11,\r\n  \"race\":\"Human\",\r\n  \"gender\":\"M\",\r\n  \"height\":\"65\",\r\n  \"weight\":\"150\",\r\n  \"age\":\"20\",\r\n  \"classname\":\"Thief\",\r\n  \"alignment\":\"Chaotic Good\"\r\n}",
					"headers": "Content-Type: application/json\n",
					"pathVariables": {}
				}
			]
		},
		{
			"id": "7352c861-5b05-459d-8544-c37b6f57ca00",
			"name": "Adhoc",
			"description": null,
			"auth": null,
			"events": null,
			"variables": null,
			"order": [
				"2d41bfd9-fe4d-485c-b92b-844f1bc203bf",
				"6e974a9d-1bbd-40c7-aa54-3fbc5c8eaf91"
			],
			"folders_order": [],
			"folders": [],
			"requests": [
				{
					"id": "2d41bfd9-fe4d-485c-b92b-844f1bc203bf",
					"name": "localget",
					"url": "http://localhost:42000/api/ADD2Character",
					"description": "",
					"data": [],
					"dataMode": "raw",
					"headerData": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [],
					"folder": null,
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "7352c861-5b05-459d-8544-c37b6f57ca00",
					"rawModeData": "{\r\n  \"name\": \"NewTest{{envName}}\",\r\n  \"playedBy\": \"AnotherNewTest{{envName}}\"\r\n}",
					"headers": "Content-Type: application/json\n",
					"pathVariables": {}
				},
				{
					"id": "6e974a9d-1bbd-40c7-aa54-3fbc5c8eaf91",
					"name": "localpost",
					"url": "http://localhost:42000/api/ADD2Character/new",
					"description": "",
					"data": [],
					"dataMode": "raw",
					"headerData": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"method": "POST",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [],
					"folder": null,
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "7352c861-5b05-459d-8544-c37b6f57ca00",
					"rawModeData": "{\r\n  \"name\": \"Test1\",\r\n  \"playedBy\": \"Test1\"\r\n}",
					"headers": "Content-Type: application/json\n",
					"pathVariables": {}
				}
			]
		}
	],
	"environments": [
		{
			"id": "047e9e5b-eca1-42e2-b4a7-a561cbbf0dce",
			"name": "prod",
			"values": [
				{
					"key": "siteName",
					"value": "add20.azurewebsites.net",
					"enabled": true,
					"type": "text"
				},
				{
					"key": "envName",
					"value": "",
					"enabled": true,
					"type": "text"
				},
				{
					"key": "protocol",
					"value": "https",
					"enabled": true,
					"type": "text"
				}
			]
		},
		{
			"id": "29cccf66-f156-453a-b3cd-c754b4c2bb5f",
			"name": "dev",
			"values": [
				{
					"key": "siteName",
					"value": "add20-dev.azurewebsites.net",
					"enabled": true,
					"type": "text"
				},
				{
					"key": "envName",
					"value": "dev",
					"enabled": true,
					"type": "text"
				},
				{
					"key": "protocol",
					"value": "https",
					"enabled": true,
					"type": "text"
				}
			]
		},
		{
			"id": "87495e70-b6f9-40ea-966f-139cda4579a8",
			"name": "local",
			"values": [
				{
					"key": "siteName",
					"value": "localhost:42000",
					"enabled": true,
					"type": "text"
				},
				{
					"key": "envName",
					"value": "",
					"enabled": true,
					"type": "text"
				},
				{
					"key": "protocol",
					"value": "http",
					"enabled": true,
					"type": "text"
				}
			]
		},
		{
			"id": "891bca0c-240f-4e43-8ca0-2aaee7d016bb",
			"name": "stage",
			"values": [
				{
					"key": "siteName",
					"value": "add20-stage.azurewebsites.net",
					"enabled": true,
					"type": "text"
				},
				{
					"key": "envName",
					"value": "stage",
					"enabled": true,
					"type": "text"
				},
				{
					"key": "protocol",
					"value": "https",
					"description": "",
					"type": "text",
					"enabled": true
				}
			]
		}
	],
	"headerPresets": [],
	"globals": []
}