{
	"version": 1,
	"collections": [
		{
			"id": "ee54c8cd-0605-4778-a5bb-da6190d5597d",
			"name": "AD&D  2nd Ed",
			"description": "",
			"auth": null,
			"events": null,
			"variables": [],
			"order": [],
			"folders_order": [
				"2a1724d3-e649-4f14-994f-7b872ee1ebf3",
				"be9fc8a4-095f-4c4c-acd9-2bcef91e517b",
				"ee9e4503-9a75-4a58-aaaa-dc0ab5b45c25",
				"be2824a5-c2b5-4002-94cb-94831b6769c1",
				"45a1f892-4242-46a1-aab2-4b1db717968d"
			],
			"folders": [
				{
					"id": "45a1f892-4242-46a1-aab2-4b1db717968d",
					"name": "Alignment Selection",
					"description": "",
					"auth": null,
					"events": null,
					"collection": "ee54c8cd-0605-4778-a5bb-da6190d5597d",
					"folder": null,
					"order": [
						"84dda99d-cdfa-4d0e-ab8d-f34583233223",
						"01ab713e-db15-441e-9782-f81b47ed6f07",
						"93cc4e6b-c361-415e-9e1a-14311d67ef70"
					],
					"folders_order": [],
					"collectionId": "ee54c8cd-0605-4778-a5bb-da6190d5597d",
					"folderId": "45a1f892-4242-46a1-aab2-4b1db717968d"
				},
				{
					"id": "be2824a5-c2b5-4002-94cb-94831b6769c1",
					"name": "Class Selection",
					"description": "",
					"auth": null,
					"events": null,
					"collection": "ee54c8cd-0605-4778-a5bb-da6190d5597d",
					"folder": null,
					"order": [
						"b8da6886-5281-446c-89d5-b71fa8354429",
						"b3b94e8b-7dab-46a9-a78d-fdadd955edde"
					],
					"folders_order": [],
					"collectionId": "ee54c8cd-0605-4778-a5bb-da6190d5597d",
					"folderId": "be2824a5-c2b5-4002-94cb-94831b6769c1"
				},
				{
					"id": "2a1724d3-e649-4f14-994f-7b872ee1ebf3",
					"name": "CrudOps",
					"description": "",
					"auth": null,
					"events": null,
					"collection": "ee54c8cd-0605-4778-a5bb-da6190d5597d",
					"folder": null,
					"order": [
						"5fb985e4-65b6-4461-ac1d-adf48585c2a2",
						"dae229da-b8e0-4edc-88f2-55c94b79bb4e",
						"1d85ff1a-ad53-4c76-80e0-f926156de381",
						"a4606a24-4f45-47fc-ba5b-917452c50a3d",
						"6cf18575-d20a-4956-820d-37c958d20195",
						"aaef42db-4bd4-4159-aca8-2214bbaf5c85",
						"9b29aaeb-4034-4e35-b41b-b997b773e9df"
					],
					"folders_order": [],
					"collectionId": "ee54c8cd-0605-4778-a5bb-da6190d5597d",
					"folderId": "2a1724d3-e649-4f14-994f-7b872ee1ebf3"
				},
				{
					"id": "ee9e4503-9a75-4a58-aaaa-dc0ab5b45c25",
					"name": "Race Selection",
					"description": "",
					"auth": null,
					"events": null,
					"collection": "ee54c8cd-0605-4778-a5bb-da6190d5597d",
					"folder": null,
					"order": [
						"fe4a9543-8b49-4ed2-8ee7-907c2b4119f3",
						"c66b7bc7-50ef-4382-b259-cebfe3ab32c7",
						"111fb33c-149f-4ad5-9ad9-1dd20f2dc086",
						"74edacfb-2958-4672-9684-fd8790ebbfb8",
						"23c47ee1-1630-46b6-99f7-620d5319a6e7",
						"6bf1b82f-406c-4ebf-9084-39a1f9897188",
						"72de8b8e-ad4c-4b45-a46b-52fc3b7aa798"
					],
					"folders_order": [],
					"collectionId": "ee54c8cd-0605-4778-a5bb-da6190d5597d",
					"folderId": "ee9e4503-9a75-4a58-aaaa-dc0ab5b45c25"
				},
				{
					"id": "be9fc8a4-095f-4c4c-acd9-2bcef91e517b",
					"name": "Stat Rolling",
					"description": "",
					"auth": null,
					"events": null,
					"collection": "ee54c8cd-0605-4778-a5bb-da6190d5597d",
					"folder": null,
					"order": [
						"8b2f06be-f934-467d-9d7e-02f45ea11830",
						"8fa491e1-8f59-4f7f-ba48-92a3e72bb791",
						"b74cfbc8-032b-4498-9575-e881ca12a07f"
					],
					"folders_order": [],
					"collectionId": "ee54c8cd-0605-4778-a5bb-da6190d5597d",
					"folderId": "be9fc8a4-095f-4c4c-acd9-2bcef91e517b"
				}
			],
			"requests": [
				{
					"id": "01ab713e-db15-441e-9782-f81b47ed6f07",
					"name": "Get Alignments for Bard",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/alignment/Bard",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "f183d1df-da36-4480-9c2f-05361bb8735d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that 5 alignments were returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(5);",
									"});",
									"",
									"pm.test(\"Check that the correct alignments were returned\", function() {",
									"    pm.expect(jsonData.includes(\"Lawful Neutral\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Neutral Good\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"True Neutral\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Neutral Evil\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Chaotic Neutral\")).to.be.true;",
									"});"
								]
							}
						}
					],
					"folder": "45a1f892-4242-46a1-aab2-4b1db717968d",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that 5 alignments were returned\", function () {\n    pm.expect(jsonData.length).to.eql(5);\n});\n\npm.test(\"Check that the correct alignments were returned\", function() {\n    pm.expect(jsonData.includes(\"Lawful Neutral\")).to.be.true;\n    pm.expect(jsonData.includes(\"Neutral Good\")).to.be.true;\n    pm.expect(jsonData.includes(\"True Neutral\")).to.be.true;\n    pm.expect(jsonData.includes(\"Neutral Evil\")).to.be.true;\n    pm.expect(jsonData.includes(\"Chaotic Neutral\")).to.be.true;\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "ee54c8cd-0605-4778-a5bb-da6190d5597d",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "111fb33c-149f-4ad5-9ad9-1dd20f2dc086",
					"name": "Races Available for the Most Unlucky Stat Roller Ever",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/races/3/3/3/3/3/3",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "289d0a83-fd86-455e-a103-06f78b5118b4",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that 1 race was returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"Check that human was returned\", function() {",
									"    pm.expect(jsonData.includes(\"Human\")).to.be.true;",
									"});"
								]
							}
						}
					],
					"folder": "ee9e4503-9a75-4a58-aaaa-dc0ab5b45c25",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that 1 race was returned\", function () {\n    pm.expect(jsonData.length).to.eql(1);\n});\n\npm.test(\"Check that human was returned\", function() {\n    pm.expect(jsonData.includes(\"Human\")).to.be.true;\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "ee54c8cd-0605-4778-a5bb-da6190d5597d",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "1d85ff1a-ad53-4c76-80e0-f926156de381",
					"name": "Add New Character",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/new",
					"description": "",
					"data": [],
					"dataMode": "raw",
					"headerData": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"method": "POST",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "2fc16979-7ae3-432a-8410-fc15c0bc363d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Post must be successful\", function() {",
									"    pm.expect(pm.response.to.be.success);",
									"});"
								]
							}
						}
					],
					"folder": "2a1724d3-e649-4f14-994f-7b872ee1ebf3",
					"preRequestScript": null,
					"tests": "pm.test(\"Post must be successful\", function() {\n    pm.expect(pm.response.to.be.success);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "ee54c8cd-0605-4778-a5bb-da6190d5597d",
					"rawModeData": "{\r\n  \"name\": \"NewTest{{envName}}\",\r\n  \"playedBy\": \"AnotherNewTest{{envName}}\"\r\n}",
					"headers": "Content-Type: application/json\n",
					"pathVariables": {}
				},
				{
					"id": "23c47ee1-1630-46b6-99f7-620d5319a6e7",
					"name": "Stat Adjustments for Human",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/statadjust/Human",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "de14ade3-c96a-48a3-96f6-2f6ceb0ce9e2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check that the right adjustments were returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(Object.keys(jsonData).length).to.eql(0);",
									"});"
								]
							}
						}
					],
					"folder": "ee9e4503-9a75-4a58-aaaa-dc0ab5b45c25",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\npm.test(\"Check that the right adjustments were returned\", function() {\n    var jsonData = pm.response.json();\n    pm.expect(Object.keys(jsonData).length).to.eql(0);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "ee54c8cd-0605-4778-a5bb-da6190d5597d",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "5fb985e4-65b6-4461-ac1d-adf48585c2a2",
					"name": "GetAll",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "55702324-2339-4279-813d-04217925e7e7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check 3 seed characters exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    var first = jsonData.find(x => x.id === 1);",
									"    pm.expect(first.name).to.eql(\"Test1\");",
									"    pm.expect(first.playedBy).to.eql(\"Test1\");",
									"    var second = jsonData.find(x => x.id === 2 );",
									"    pm.expect(second.name).to.eql(\"Someone\");",
									"    pm.expect(second.playedBy).to.eql(\"Somebody\");",
									"    var third = jsonData.find(x => x.id === 3);",
									"    pm.expect(third.name).to.eql(\"Person\");",
									"    pm.expect(third.playedBy).to.eql(\"A Person\");",
									"});"
								]
							}
						}
					],
					"folder": "2a1724d3-e649-4f14-994f-7b872ee1ebf3",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\npm.test(\"Check 3 seed characters exist\", function () {\n    var jsonData = pm.response.json();\n    var first = jsonData.find(x => x.id === 1);\n    pm.expect(first.name).to.eql(\"Test1\");\n    pm.expect(first.playedBy).to.eql(\"Test1\");\n    var second = jsonData.find(x => x.id === 2 );\n    pm.expect(second.name).to.eql(\"Someone\");\n    pm.expect(second.playedBy).to.eql(\"Somebody\");\n    var third = jsonData.find(x => x.id === 3);\n    pm.expect(third.name).to.eql(\"Person\");\n    pm.expect(third.playedBy).to.eql(\"A Person\");\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "ee54c8cd-0605-4778-a5bb-da6190d5597d",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "6bf1b82f-406c-4ebf-9084-39a1f9897188",
					"name": "Starting Height/Weight/Age for Dwarf Male",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/hwa/dwarf/m",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "1b5efdf6-dc16-457e-9a36-97ef655765fe",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that the height was in the correct range\", function() {",
									"    pm.expect(jsonData[0]).to.be.above(43).and.below(54);",
									"});",
									"",
									"pm.test(\"Check that the weight was in the correct range\", function() {",
									"    pm.expect(jsonData[1]).to.be.above(133).and.below(171);",
									"});",
									"",
									"pm.test(\"Check that the age was in the correct range\", function() {",
									"    pm.expect(jsonData[2]).to.be.above(44).and.below(71);",
									"});"
								]
							}
						}
					],
					"folder": "ee9e4503-9a75-4a58-aaaa-dc0ab5b45c25",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that the height was in the correct range\", function() {\n    pm.expect(jsonData[0]).to.be.above(43).and.below(54);\n});\n\npm.test(\"Check that the weight was in the correct range\", function() {\n    pm.expect(jsonData[1]).to.be.above(133).and.below(171);\n});\n\npm.test(\"Check that the age was in the correct range\", function() {\n    pm.expect(jsonData[2]).to.be.above(44).and.below(71);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "ee54c8cd-0605-4778-a5bb-da6190d5597d",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "6cf18575-d20a-4956-820d-37c958d20195",
					"name": "Update Added Character",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/4",
					"description": "",
					"data": [],
					"dataMode": "raw",
					"headerData": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"method": "PUT",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "4bd886ea-b68f-4636-8b5d-204f6135cff8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Put must be successful\", function() {",
									"    pm.expect(pm.response.to.be.success);",
									"});"
								]
							}
						}
					],
					"folder": "2a1724d3-e649-4f14-994f-7b872ee1ebf3",
					"preRequestScript": null,
					"tests": "pm.test(\"Put must be successful\", function() {\n    pm.expect(pm.response.to.be.success);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "ee54c8cd-0605-4778-a5bb-da6190d5597d",
					"rawModeData": "{\r\n  \"name\":\"new toon{{envName}}\",\r\n  \"playedBy\":\"new person{{envName}}\",\r\n  \"str\":10,\r\n  \"dex\":18,\r\n  \"con\":13,\r\n  \"int\":9,\r\n  \"wis\":7,\r\n  \"chr\":11,\r\n  \"race\":\"Human\",\r\n  \"gender\":\"M\",\r\n  \"height\":\"65\",\r\n  \"weight\":\"150\",\r\n  \"age\":\"20\",\r\n  \"classname\":\"Thief\"\r\n}",
					"headers": "Content-Type: application/json\n",
					"pathVariables": {}
				},
				{
					"id": "72de8b8e-ad4c-4b45-a46b-52fc3b7aa798",
					"name": "Starting Height/Weight/Age for Half-Elf Female",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/hwa/half-elf/f",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "3d434e8d-7932-4918-81be-c851ed068377",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that the height was in the correct range\", function() {",
									"    pm.expect(jsonData[0]).to.be.above(59).and.below(71);",
									"});",
									"",
									"pm.test(\"Check that the weight was in the correct range\", function() {",
									"    pm.expect(jsonData[1]).to.be.above(87).and.below(122);",
									"});",
									"",
									"pm.test(\"Check that the age was in the correct range\", function() {",
									"    pm.expect(jsonData[2]).to.be.above(15).and.below(22);",
									"});"
								]
							}
						}
					],
					"folder": "ee9e4503-9a75-4a58-aaaa-dc0ab5b45c25",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that the height was in the correct range\", function() {\n    pm.expect(jsonData[0]).to.be.above(59).and.below(71);\n});\n\npm.test(\"Check that the weight was in the correct range\", function() {\n    pm.expect(jsonData[1]).to.be.above(87).and.below(122);\n});\n\npm.test(\"Check that the age was in the correct range\", function() {\n    pm.expect(jsonData[2]).to.be.above(15).and.below(22);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "ee54c8cd-0605-4778-a5bb-da6190d5597d",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "74edacfb-2958-4672-9684-fd8790ebbfb8",
					"name": "Stat Adjustments for Gnome",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/statadjust/gnome",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "4572370a-0be6-4664-a9fa-fa64c4635782",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check that the right adjustments were returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.int).to.eql(1);",
									"    pm.expect(jsonData.wis).to.eql(-1);",
									"});"
								]
							}
						}
					],
					"folder": "ee9e4503-9a75-4a58-aaaa-dc0ab5b45c25",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\npm.test(\"Check that the right adjustments were returned\", function() {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.int).to.eql(1);\n    pm.expect(jsonData.wis).to.eql(-1);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "ee54c8cd-0605-4778-a5bb-da6190d5597d",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "84dda99d-cdfa-4d0e-ab8d-f34583233223",
					"name": "Get Alignments for Paladin",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/alignment/Paladin",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "391b407f-20b6-4bfd-9634-3245053cf606",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that 1 alignment was returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"Check that Lawful Good was returned\", function() {",
									"    pm.expect(jsonData.includes(\"Lawful Good\")).to.be.true;",
									"});"
								]
							}
						}
					],
					"folder": "45a1f892-4242-46a1-aab2-4b1db717968d",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that 1 alignment was returned\", function () {\n    pm.expect(jsonData.length).to.eql(1);\n});\n\npm.test(\"Check that Lawful Good was returned\", function() {\n    pm.expect(jsonData.includes(\"Lawful Good\")).to.be.true;\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "ee54c8cd-0605-4778-a5bb-da6190d5597d",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "8b2f06be-f934-467d-9d7e-02f45ea11830",
					"name": "RollOnce",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/rollstats/rollonce",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "85b624ab-48ca-4e46-96e7-da99baaa18eb",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that 6 rolls were made\", function () {",
									"    pm.expect(jsonData.length).to.eql(6);",
									"});",
									"",
									"pm.test(\"Check that each roll had 3 dice in it\", function() {",
									"    for(var i = 0; i < jsonData.length; i++)",
									"        pm.expect(jsonData[i].length).to.eql(3);",
									"});",
									"",
									"pm.test(\"Check that each roll was within expected bounds\", function() {",
									"    for(var i = 0; i < jsonData.length; i++)",
									"        pm.expect(jsonData[i].reduce(function(acc, val) {return acc + val;})).to.be.gte(3).and.lte(18);",
									"});"
								]
							}
						}
					],
					"folder": "be9fc8a4-095f-4c4c-acd9-2bcef91e517b",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that 6 rolls were made\", function () {\n    pm.expect(jsonData.length).to.eql(6);\n});\n\npm.test(\"Check that each roll had 3 dice in it\", function() {\n    for(var i = 0; i < jsonData.length; i++)\n        pm.expect(jsonData[i].length).to.eql(3);\n});\n\npm.test(\"Check that each roll was within expected bounds\", function() {\n    for(var i = 0; i < jsonData.length; i++)\n        pm.expect(jsonData[i].reduce(function(acc, val) {return acc + val;})).to.be.gte(3).and.lte(18);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "ee54c8cd-0605-4778-a5bb-da6190d5597d",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "8fa491e1-8f59-4f7f-ba48-92a3e72bb791",
					"name": "Add 7 Dice",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/rollstats/AddSevenDice",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "b5f247b8-e76e-4d68-81e8-074083d65838",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that 7 rolls were made\", function () {",
									"    pm.expect(jsonData.length).to.eql(7);",
									"});",
									"",
									"pm.test(\"Check that each roll had 1 die in it\", function() {",
									"    for(var i = 0; i < jsonData.length; i++)",
									"        pm.expect(jsonData[i].length).to.eql(1);",
									"});",
									"",
									"pm.test(\"Check that each roll was within expected bounds\", function() {",
									"    for(var i = 0; i < jsonData.length; i++)",
									"        pm.expect(jsonData[i].reduce(function(acc, val) {return acc + val;})).to.be.gte(1).and.lte(6);",
									"});"
								]
							}
						}
					],
					"folder": "be9fc8a4-095f-4c4c-acd9-2bcef91e517b",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that 7 rolls were made\", function () {\n    pm.expect(jsonData.length).to.eql(7);\n});\n\npm.test(\"Check that each roll had 1 die in it\", function() {\n    for(var i = 0; i < jsonData.length; i++)\n        pm.expect(jsonData[i].length).to.eql(1);\n});\n\npm.test(\"Check that each roll was within expected bounds\", function() {\n    for(var i = 0; i < jsonData.length; i++)\n        pm.expect(jsonData[i].reduce(function(acc, val) {return acc + val;})).to.be.gte(1).and.lte(6);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "ee54c8cd-0605-4778-a5bb-da6190d5597d",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "93cc4e6b-c361-415e-9e1a-14311d67ef70",
					"name": "Get Alignments for Cleric",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/alignment/Cleric",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "b31fa013-9bbf-4c4d-baee-55e867987f33",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that all 9 alignments were returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(9);",
									"});",
									"",
									"pm.test(\"Check that all the alignments were returned\", function() {",
									"    pm.expect(jsonData.includes(\"Lawful Good\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Lawful Neutral\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Lawful Evil\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Neutral Good\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"True Neutral\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Neutral Evil\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Chaotic Good\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Chaotic Neutral\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Chaotic Evil\")).to.be.true;",
									"});"
								]
							}
						}
					],
					"folder": "45a1f892-4242-46a1-aab2-4b1db717968d",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that all 9 alignments were returned\", function () {\n    pm.expect(jsonData.length).to.eql(9);\n});\n\npm.test(\"Check that all the alignments were returned\", function() {\n    pm.expect(jsonData.includes(\"Lawful Good\")).to.be.true;\n    pm.expect(jsonData.includes(\"Lawful Neutral\")).to.be.true;\n    pm.expect(jsonData.includes(\"Lawful Evil\")).to.be.true;\n    pm.expect(jsonData.includes(\"Neutral Good\")).to.be.true;\n    pm.expect(jsonData.includes(\"True Neutral\")).to.be.true;\n    pm.expect(jsonData.includes(\"Neutral Evil\")).to.be.true;\n    pm.expect(jsonData.includes(\"Chaotic Good\")).to.be.true;\n    pm.expect(jsonData.includes(\"Chaotic Neutral\")).to.be.true;\n    pm.expect(jsonData.includes(\"Chaotic Evil\")).to.be.true;\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "ee54c8cd-0605-4778-a5bb-da6190d5597d",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "9b29aaeb-4034-4e35-b41b-b997b773e9df",
					"name": "Delete Added Character",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/4",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "DELETE",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "7a4e5eba-b474-4a64-b0f3-d11577a3a770",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Delete must be successful\", function() {",
									"    pm.expect(pm.response.to.be.success);",
									"});"
								]
							}
						}
					],
					"folder": "2a1724d3-e649-4f14-994f-7b872ee1ebf3",
					"preRequestScript": null,
					"tests": "pm.test(\"Delete must be successful\", function() {\n    pm.expect(pm.response.to.be.success);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "ee54c8cd-0605-4778-a5bb-da6190d5597d",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "a4606a24-4f45-47fc-ba5b-917452c50a3d",
					"name": "Get New Character",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/4",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "f36966a4-4b8d-4fd5-a701-bb629e55c959",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check Id, name, playedBy and stats of character id 4\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(4);",
									"    pm.expect(jsonData.name).to.eql(\"NewTest\" + pm.environment.get(\"envName\"));",
									"    pm.expect(jsonData.playedBy).to.eql(\"AnotherNewTest\" + pm.environment.get(\"envName\"));",
									"    pm.expect(jsonData.str).to.eql(0);",
									"    pm.expect(jsonData.dex).to.eql(0);",
									"    pm.expect(jsonData.con).to.eql(0);",
									"    pm.expect(jsonData.int).to.eql(0);",
									"    pm.expect(jsonData.wis).to.eql(0);",
									"    pm.expect(jsonData.chr).to.eql(0);",
									"});"
								]
							}
						}
					],
					"folder": "2a1724d3-e649-4f14-994f-7b872ee1ebf3",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\npm.test(\"Check Id, name, playedBy and stats of character id 4\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.id).to.eql(4);\n    pm.expect(jsonData.name).to.eql(\"NewTest\" + pm.environment.get(\"envName\"));\n    pm.expect(jsonData.playedBy).to.eql(\"AnotherNewTest\" + pm.environment.get(\"envName\"));\n    pm.expect(jsonData.str).to.eql(0);\n    pm.expect(jsonData.dex).to.eql(0);\n    pm.expect(jsonData.con).to.eql(0);\n    pm.expect(jsonData.int).to.eql(0);\n    pm.expect(jsonData.wis).to.eql(0);\n    pm.expect(jsonData.chr).to.eql(0);\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "ee54c8cd-0605-4778-a5bb-da6190d5597d",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "aaef42db-4bd4-4159-aca8-2214bbaf5c85",
					"name": "Get Updated Character",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/4",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "7c97475a-cdc9-4b28-8cf4-d94de605e28c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check that all properties of character were updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(4);",
									"    pm.expect(jsonData.name).to.eql(\"new toon\" + pm.environment.get(\"envName\"));",
									"    pm.expect(jsonData.playedBy).to.eql(\"new person\" + pm.environment.get(\"envName\"));",
									"    pm.expect(jsonData.str).to.eql(10);",
									"    pm.expect(jsonData.dex).to.eql(18);",
									"    pm.expect(jsonData.con).to.eql(13);",
									"    pm.expect(jsonData.int).to.eql(9);",
									"    pm.expect(jsonData.wis).to.eql(7);",
									"    pm.expect(jsonData.chr).to.eql(11);",
									"    pm.expect(jsonData.race).to.eql(\"Human\");",
									"    pm.expect(jsonData.gender).to.eql(\"M\");",
									"    pm.expect(jsonData.height).to.eql(65);",
									"    pm.expect(jsonData.weight).to.eql(150);",
									"    pm.expect(jsonData.age).to.eql(20);",
									"    pm.expect(jsonData.className).to.eql(\"Thief\");",
									"});"
								]
							}
						}
					],
					"folder": "2a1724d3-e649-4f14-994f-7b872ee1ebf3",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\npm.test(\"Check that all properties of character were updated\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.id).to.eql(4);\n    pm.expect(jsonData.name).to.eql(\"new toon\" + pm.environment.get(\"envName\"));\n    pm.expect(jsonData.playedBy).to.eql(\"new person\" + pm.environment.get(\"envName\"));\n    pm.expect(jsonData.str).to.eql(10);\n    pm.expect(jsonData.dex).to.eql(18);\n    pm.expect(jsonData.con).to.eql(13);\n    pm.expect(jsonData.int).to.eql(9);\n    pm.expect(jsonData.wis).to.eql(7);\n    pm.expect(jsonData.chr).to.eql(11);\n    pm.expect(jsonData.race).to.eql(\"Human\");\n    pm.expect(jsonData.gender).to.eql(\"M\");\n    pm.expect(jsonData.height).to.eql(65);\n    pm.expect(jsonData.weight).to.eql(150);\n    pm.expect(jsonData.age).to.eql(20);\n    pm.expect(jsonData.className).to.eql(\"Thief\");\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "ee54c8cd-0605-4778-a5bb-da6190d5597d",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "b3b94e8b-7dab-46a9-a78d-fdadd955edde",
					"name": "Classes Available for Gnome",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/classes/Gnome/8/18/10/13/18/9",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "48d4b257-5597-43a7-9b74-0515c0d95f6e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that 3 classes were returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(3);",
									"});",
									"",
									"pm.test(\"Check that the expected classes were returned\", function() {",
									"    pm.expect(jsonData.includes(\"Cleric\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Thief\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Cleric/Thief\")).to.be.true;",
									"});"
								]
							}
						}
					],
					"folder": "be2824a5-c2b5-4002-94cb-94831b6769c1",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that 3 classes were returned\", function () {\n    pm.expect(jsonData.length).to.eql(3);\n});\n\npm.test(\"Check that the expected classes were returned\", function() {\n    pm.expect(jsonData.includes(\"Cleric\")).to.be.true;\n    pm.expect(jsonData.includes(\"Thief\")).to.be.true;\n    pm.expect(jsonData.includes(\"Cleric/Thief\")).to.be.true;\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "ee54c8cd-0605-4778-a5bb-da6190d5597d",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "b74cfbc8-032b-4498-9575-e881ca12a07f",
					"name": "Invalid Roll Rule",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/rollstats/invalid",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "026dfdbd-8d67-47f0-8f46-f9bae063fecc",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be 400 - bad request\", function() {",
									"    pm.response.to.be.clientError;",
									"});"
								]
							}
						}
					],
					"folder": "be9fc8a4-095f-4c4c-acd9-2bcef91e517b",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be 400 - bad request\", function() {\n    pm.response.to.be.clientError;\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "ee54c8cd-0605-4778-a5bb-da6190d5597d",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "b8da6886-5281-446c-89d5-b71fa8354429",
					"name": "Classes Available for Average Human",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/classes/Human/9/9/9/9/9/9",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "e87cfce8-8ae4-4ba8-b1f9-454362c2b924",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that 4 classes were returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(4);",
									"});",
									"",
									"pm.test(\"Check that the expected classes were returned\", function() {",
									"    pm.expect(jsonData.includes(\"Fighter\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Mage\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Cleric\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Thief\")).to.be.true;",
									"});"
								]
							}
						}
					],
					"folder": "be2824a5-c2b5-4002-94cb-94831b6769c1",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that 4 classes were returned\", function () {\n    pm.expect(jsonData.length).to.eql(4);\n});\n\npm.test(\"Check that the expected classes were returned\", function() {\n    pm.expect(jsonData.includes(\"Fighter\")).to.be.true;\n    pm.expect(jsonData.includes(\"Mage\")).to.be.true;\n    pm.expect(jsonData.includes(\"Cleric\")).to.be.true;\n    pm.expect(jsonData.includes(\"Thief\")).to.be.true;\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "ee54c8cd-0605-4778-a5bb-da6190d5597d",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "c66b7bc7-50ef-4382-b259-cebfe3ab32c7",
					"name": "Races Available with High Stats",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/races/17/17/17/17/17/17",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "9fe87da8-88cf-48e1-b531-241cd9e5cc4a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that 6 races were returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(6);",
									"});",
									"",
									"pm.test(\"Check that the expected races were returned\", function() {",
									"    pm.expect(jsonData.includes(\"Dwarf\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Elf\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Gnome\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Half-Elf\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Halfling\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Human\")).to.be.true;",
									"});"
								]
							}
						}
					],
					"folder": "ee9e4503-9a75-4a58-aaaa-dc0ab5b45c25",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that 6 races were returned\", function () {\n    pm.expect(jsonData.length).to.eql(6);\n});\n\npm.test(\"Check that the expected races were returned\", function() {\n    pm.expect(jsonData.includes(\"Dwarf\")).to.be.true;\n    pm.expect(jsonData.includes(\"Elf\")).to.be.true;\n    pm.expect(jsonData.includes(\"Gnome\")).to.be.true;\n    pm.expect(jsonData.includes(\"Half-Elf\")).to.be.true;\n    pm.expect(jsonData.includes(\"Halfling\")).to.be.true;\n    pm.expect(jsonData.includes(\"Human\")).to.be.true;\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "ee54c8cd-0605-4778-a5bb-da6190d5597d",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "dae229da-b8e0-4edc-88f2-55c94b79bb4e",
					"name": "GetId1",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/1",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "f866e231-d075-4fa0-bd17-b6440d4de225",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check Id, name and playedBy of character id 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(1);",
									"    pm.expect(jsonData.name).to.eql(\"Test1\");",
									"    pm.expect(jsonData.playedBy).to.eql(\"Test1\");",
									"});"
								]
							}
						}
					],
					"folder": "2a1724d3-e649-4f14-994f-7b872ee1ebf3",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\npm.test(\"Check Id, name and playedBy of character id 1\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.id).to.eql(1);\n    pm.expect(jsonData.name).to.eql(\"Test1\");\n    pm.expect(jsonData.playedBy).to.eql(\"Test1\");\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "ee54c8cd-0605-4778-a5bb-da6190d5597d",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "fe4a9543-8b49-4ed2-8ee7-907c2b4119f3",
					"name": "Races Available with Low Stats",
					"url": "{{protocol}}://{{siteName}}/api/ADD2Character/races/8/7/11/5/3/8",
					"description": "",
					"data": null,
					"dataMode": "params",
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "6844fe5c-066b-4b71-9df8-e7b02d273d5b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response must be valid and have a body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check that 3 races were returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(3);",
									"});",
									"",
									"pm.test(\"Check that the expected races were returned\", function() {",
									"    pm.expect(jsonData.includes(\"Dwarf\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Half-Elf\")).to.be.true;",
									"    pm.expect(jsonData.includes(\"Human\")).to.be.true;",
									"});"
								]
							}
						}
					],
					"folder": "ee9e4503-9a75-4a58-aaaa-dc0ab5b45c25",
					"preRequestScript": null,
					"tests": "pm.test(\"Response must be valid and have a body\", function() {\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\nvar jsonData = pm.response.json();\n\npm.test(\"Check that 3 races were returned\", function () {\n    pm.expect(jsonData.length).to.eql(3);\n});\n\npm.test(\"Check that the expected races were returned\", function() {\n    pm.expect(jsonData.includes(\"Dwarf\")).to.be.true;\n    pm.expect(jsonData.includes(\"Half-Elf\")).to.be.true;\n    pm.expect(jsonData.includes(\"Human\")).to.be.true;\n});",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "ee54c8cd-0605-4778-a5bb-da6190d5597d",
					"headers": "",
					"pathVariables": {}
				}
			]
		},
		{
			"id": "fe04cebb-7316-4359-875c-6e86060f8d12",
			"name": "Adhoc",
			"description": null,
			"auth": null,
			"events": null,
			"variables": null,
			"order": [
				"f7208a5b-f809-4b84-ba68-de2e5c2ae7c8",
				"0ee4addc-600d-4526-aa8e-e2330c465b74"
			],
			"folders_order": [],
			"folders": [],
			"requests": [
				{
					"id": "0ee4addc-600d-4526-aa8e-e2330c465b74",
					"name": "localpost",
					"url": "http://localhost:42000/api/ADD2Character/new",
					"description": "",
					"data": [],
					"dataMode": "raw",
					"headerData": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"method": "POST",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [],
					"folder": null,
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "fe04cebb-7316-4359-875c-6e86060f8d12",
					"rawModeData": "{\r\n  \"name\": \"Test1\",\r\n  \"playedBy\": \"Test1\"\r\n}",
					"headers": "Content-Type: application/json\n",
					"pathVariables": {}
				},
				{
					"id": "f7208a5b-f809-4b84-ba68-de2e5c2ae7c8",
					"name": "localget",
					"url": "http://localhost:42000/api/ADD2Character",
					"description": "",
					"data": [],
					"dataMode": "raw",
					"headerData": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [],
					"folder": null,
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "fe04cebb-7316-4359-875c-6e86060f8d12",
					"rawModeData": "{\r\n  \"name\": \"NewTest{{envName}}\",\r\n  \"playedBy\": \"AnotherNewTest{{envName}}\"\r\n}",
					"headers": "Content-Type: application/json\n",
					"pathVariables": {}
				}
			]
		}
	],
	"environments": [
		{
			"id": "10939a33-6d43-4b7a-b66a-146d8083b70f",
			"name": "prod",
			"values": [
				{
					"key": "siteName",
					"value": "chargendev.azurewebsites.net",
					"enabled": true,
					"type": "text"
				},
				{
					"key": "envName",
					"value": "",
					"enabled": true,
					"type": "text"
				},
				{
					"key": "protocol",
					"value": "https",
					"enabled": true,
					"type": "text"
				}
			]
		},
		{
			"id": "8834cde4-2d80-42f2-93f5-380150e80228",
			"name": "dev",
			"values": [
				{
					"key": "siteName",
					"value": "chargendev-dev.azurewebsites.net",
					"enabled": true,
					"type": "text"
				},
				{
					"key": "envName",
					"value": "dev",
					"enabled": true,
					"type": "text"
				},
				{
					"key": "protocol",
					"value": "https",
					"enabled": true,
					"type": "text"
				}
			]
		},
		{
			"id": "ac6a3b97-acb4-48e8-8ad3-0a0c5706dfb4",
			"name": "stage",
			"values": [
				{
					"key": "siteName",
					"value": "chargendev-stage.azurewebsites.net",
					"enabled": true,
					"type": "text"
				},
				{
					"key": "envName",
					"value": "stage",
					"enabled": true,
					"type": "text"
				},
				{
					"key": "protocol",
					"value": "https",
					"description": "",
					"type": "text",
					"enabled": true
				}
			]
		},
		{
			"id": "f1d480d2-be3f-41b7-8ea6-316154a77405",
			"name": "local",
			"values": [
				{
					"key": "siteName",
					"value": "localhost:42000",
					"enabled": true,
					"type": "text"
				},
				{
					"key": "envName",
					"value": "",
					"enabled": true,
					"type": "text"
				},
				{
					"key": "protocol",
					"value": "http",
					"enabled": true,
					"type": "text"
				}
			]
		}
	],
	"headerPresets": [],
	"globals": []
}